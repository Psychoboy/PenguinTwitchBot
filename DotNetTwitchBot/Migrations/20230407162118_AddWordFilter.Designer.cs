// <auto-generated />
using System;
using DotNetTwitchBot.Bot.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetTwitchBot.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230407162118_AddWordFilter")]
    partial class AddWordFilter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.AudioCommand", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AudioFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("GlobalCooldown")
                        .HasColumnType("int");

                    b.Property<int>("MinimumRank")
                        .HasColumnType("int");

                    b.Property<int>("UserCooldown")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandName");

                    b.ToTable("AudioCommands");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.AutoShoutout", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CustomMessage")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastShoutout")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("AutoShoutouts");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Counter", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CounterName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CounterName");

                    b.ToTable("Counters");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.CustomCommands", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("GlobalCooldown")
                        .HasColumnType("int");

                    b.Property<int>("MinimumRank")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserCooldown")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandName");

                    b.ToTable("CustomCommands");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.DeathCounter", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Game")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Game");

                    b.ToTable("DeathCounters");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Follower", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FollowDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.GiveawayEntry", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Tickets")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("GiveawayEntries");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.KeywordType", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cooldown")
                        .HasColumnType("int");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRegex")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.MusicPlaylist", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.QuoteType", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Game")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Quote")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.RaidHistoryEntry", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastCheckOnline")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastIncomingRaid")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastOutgoingRaid")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalIncomingRaidViewers")
                        .HasColumnType("int");

                    b.Property<int>("TotalIncomingRaids")
                        .HasColumnType("int");

                    b.Property<int>("TotalOutGoingRaidViewers")
                        .HasColumnType("int");

                    b.Property<int>("TotalOutgoingRaids")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RaidHistory");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Setting", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<double>("DoubleSetting")
                        .HasColumnType("double");

                    b.Property<int>("IntSetting")
                        .HasColumnType("int");

                    b.Property<long>("LongSetting")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StringSetting")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Song", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<int?>("MusicPlaylistId")
                        .HasColumnType("int");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SongId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MusicPlaylistId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Timers.TimerGroup", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IntervalMaximum")
                        .HasColumnType("int");

                    b.Property<int>("IntervalMinimum")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastRun")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MinimumMessages")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("NextRun")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Shuffle")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("TimerGroups");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Timers.TimerMessage", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TimerGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimerGroupId");

                    b.ToTable("TimerMessages");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Viewer", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("isBroadcaster")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isMod")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isSub")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isVip")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("Viewers");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ViewerMessageCount", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("MessageCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ViewerMessageCounts");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ViewerMessageCountWithRank", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<long>("MessageCount")
                        .HasColumnType("bigint");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("ViewerMessageCountWithRanks", (string)null);
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ViewerPoint", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ViewerPoints");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ViewerPointWithRank", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("ViewerPointWithRanks", (string)null);
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ViewerTicket", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("ViewerTickets");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ViewerTicketWithRanks", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("ViewerTicketWithRanks", (string)null);
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ViewerTime", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ViewersTime");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ViewerTimeWithRank", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("ViewersTimeWithRank", (string)null);
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.WordFilter", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BanReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ExcludeRegulars")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ExcludeSubscribers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ExcludeVips")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRegex")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSilent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phrase")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("TimeOutLength")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.ToTable("WordFilters");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Song", b =>
                {
                    b.HasOne("DotNetTwitchBot.Bot.Models.MusicPlaylist", null)
                        .WithMany("Songs")
                        .HasForeignKey("MusicPlaylistId");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Timers.TimerMessage", b =>
                {
                    b.HasOne("DotNetTwitchBot.Bot.Models.Timers.TimerGroup", null)
                        .WithMany("Messages")
                        .HasForeignKey("TimerGroupId");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.MusicPlaylist", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Timers.TimerGroup", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
