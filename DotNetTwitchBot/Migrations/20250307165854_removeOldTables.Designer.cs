// <auto-generated />
using System;
using DotNetTwitchBot.Bot.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetTwitchBot.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250307165854_removeOldTables")]
    partial class removeOldTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.AliasModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AliasName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Aliases");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.AutoShoutout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoPlayClip")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CustomMessage")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastShoutout")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("AutoShoutouts");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.BannedViewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("BannedViewers");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ChannelPointRedeem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ElevatedPermission")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ChannelPointRedeems");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Commands.AudioCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ExcludeFromUi")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("GlobalCooldown")
                        .HasColumnType("int");

                    b.Property<int>("MinimumRank")
                        .HasColumnType("int");

                    b.Property<int?>("PointTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("RunFromBroadcasterOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SayCooldown")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SayRankRequirement")
                        .HasColumnType("tinyint(1)");

                    b.PrimitiveCollection<string>("SpecificRanks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpecificUserOnly")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("SpecificUsersOnly")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserCooldown")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandName");

                    b.HasIndex("PointTypeId");

                    b.ToTable("AudioCommands");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Commands.CurrentCooldowns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("NextGlobalCooldownTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("NextUserCooldownTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CommandName", "IsGlobal");

                    b.HasIndex("CommandName", "UserName");

                    b.ToTable("Cooldowns");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Commands.CustomCommands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ExcludeFromUi")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("GlobalCooldown")
                        .HasColumnType("int");

                    b.Property<int>("MinimumRank")
                        .HasColumnType("int");

                    b.Property<int?>("PointTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("RespondAsStreamer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("RunFromBroadcasterOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SayCooldown")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SayRankRequirement")
                        .HasColumnType("tinyint(1)");

                    b.PrimitiveCollection<string>("SpecificRanks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpecificUserOnly")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("SpecificUsersOnly")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserCooldown")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandName");

                    b.HasIndex("PointTypeId");

                    b.ToTable("CustomCommands");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Commands.DefaultCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("CustomCommandName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ExcludeFromUi")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("GlobalCooldown")
                        .HasColumnType("int");

                    b.Property<int>("MinimumRank")
                        .HasColumnType("int");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PointTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("RunFromBroadcasterOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SayCooldown")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SayRankRequirement")
                        .HasColumnType("tinyint(1)");

                    b.PrimitiveCollection<string>("SpecificRanks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpecificUserOnly")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("SpecificUsersOnly")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserCooldown")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandName");

                    b.HasIndex("PointTypeId");

                    b.ToTable("DefaultCommands");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Commands.ExternalCommands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ExcludeFromUi")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("GlobalCooldown")
                        .HasColumnType("int");

                    b.Property<int>("MinimumRank")
                        .HasColumnType("int");

                    b.Property<int?>("PointTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("RunFromBroadcasterOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SayCooldown")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SayRankRequirement")
                        .HasColumnType("tinyint(1)");

                    b.PrimitiveCollection<string>("SpecificRanks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpecificUserOnly")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("SpecificUsersOnly")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserCooldown")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandName");

                    b.HasIndex("PointTypeId");

                    b.ToTable("ExternalCommands");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Commands.KeywordType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ExcludeFromUi")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("GlobalCooldown")
                        .HasColumnType("int");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRegex")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MinimumRank")
                        .HasColumnType("int");

                    b.Property<int?>("PointTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("RunFromBroadcasterOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SayCooldown")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SayRankRequirement")
                        .HasColumnType("tinyint(1)");

                    b.PrimitiveCollection<string>("SpecificRanks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpecificUserOnly")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("SpecificUsersOnly")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserCooldown")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandName");

                    b.HasIndex("PointTypeId");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Counter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CounterName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CounterName");

                    b.ToTable("Counters");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.DeathCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Game")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Game");

                    b.ToTable("DeathCounters");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.DiscordEventMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<ulong>("DiscordEventId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("TwitchEventId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DiscordEvents");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.FilteredQuoteType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Game")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Quote")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("FilteredQuotes", (string)null);
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Games.GameSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("SettingBoolValue")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("SettingDoubleValue")
                        .HasColumnType("double");

                    b.Property<int>("SettingIntValue")
                        .HasColumnType("int");

                    b.Property<long>("SettingLongValue")
                        .HasColumnType("bigint");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SettingStringValue")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GameName");

                    b.HasIndex("SettingName");

                    b.HasIndex("GameName", "SettingName");

                    b.ToTable("GameSettings");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Giveaway.GiveawayEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Tickets")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("GiveawayEntries");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Giveaway.GiveawayExclusion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpireDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("GiveawayExclusions");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Giveaway.GiveawayWinner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClaimedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsFollowing")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Prize")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PrizeTier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("WinningDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("GiveawayWinners");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.IpLogs.IpLogEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ConnectedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("IpLogEntrys");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.KnownBot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("KnownBots");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Metrics.SongRequestHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SongId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SongRequestHistories");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Metrics.SongRequestHistoryWithRank", b =>
                {
                    b.Property<string>("SongId")
                        .HasColumnType("varchar(255)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("LastRequestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<int>("RequestedCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SongId");

                    b.ToTable((string)null);

                    b.ToView("SongRequestHistoryWithRank", (string)null);
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Metrics.SongRequestMetric", b =>
                {
                    b.Property<string>("SongId")
                        .HasColumnType("varchar(255)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<int>("RequestedCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SongId");

                    b.ToTable("SongRequestMetrics");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Metrics.SongRequestMetricsWithRank", b =>
                {
                    b.Property<string>("SongId")
                        .HasColumnType("varchar(255)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<int>("RequestedCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SongId");

                    b.ToTable((string)null);

                    b.ToView("SongRequestMetricsWithRank", (string)null);
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.MusicPlaylist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Points.PointCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CommandType")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ExcludeFromUi")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("GlobalCooldown")
                        .HasColumnType("int");

                    b.Property<int>("MinimumRank")
                        .HasColumnType("int");

                    b.Property<int>("PointTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("RunFromBroadcasterOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SayCooldown")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SayRankRequirement")
                        .HasColumnType("tinyint(1)");

                    b.PrimitiveCollection<string>("SpecificRanks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpecificUserOnly")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("SpecificUsersOnly")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserCooldown")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandName");

                    b.HasIndex("PointTypeId");

                    b.ToTable("PointCommands");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Points.PointType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("PointTypes");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Points.UserPoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Banned")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PointTypeId")
                        .HasColumnType("int");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PointTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("Username");

                    b.ToTable("UserPoints");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.QuoteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Game")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Quote")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.RaidHistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastCheckOnline")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastGame")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastIncomingRaid")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastOutgoingRaid")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalIncomingRaidViewers")
                        .HasColumnType("int");

                    b.Property<int>("TotalIncomingRaids")
                        .HasColumnType("int");

                    b.Property<int>("TotalOutGoingRaidViewers")
                        .HasColumnType("int");

                    b.Property<int>("TotalOutgoingRaids")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RaidHistory");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.RegisteredVoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RegisteredVoices");

                    b.HasDiscriminator().HasValue("RegisteredVoice");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<double>("DoubleSetting")
                        .HasColumnType("double");

                    b.Property<int>("IntSetting")
                        .HasColumnType("int");

                    b.Property<long>("LongSetting")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StringSetting")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<int>("MusicPlaylistId")
                        .HasColumnType("int");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SongId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MusicPlaylistId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.SongRequestViewItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SongId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SongRequestViewItems");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.SubscriptionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastSub")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("SubscriptionHistories");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Timers.TimerGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IntervalMaximum")
                        .HasColumnType("int");

                    b.Property<int>("IntervalMinimum")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastRun")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MinimumMessages")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("NextRun")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Repeat")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Shuffle")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("TimerGroups");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Timers.TimerMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TimerGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimerGroupId");

                    b.ToTable("TimerMessages");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.TwitchEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ElevatedPermission")
                        .HasColumnType("int");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TwitchEvents");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Viewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("isBroadcaster")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isEditor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isMod")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isSub")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isVip")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Username");

                    b.ToTable("Viewers");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ViewerChatHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MessageId")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("ViewerChatHistories");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ViewerMessageCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("MessageCount")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("banned")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ViewerMessageCounts");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ViewerMessageCountWithRank", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<long>("MessageCount")
                        .HasColumnType("bigint");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("ViewerMessageCountWithRanks", (string)null);
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ViewerTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("banned")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ViewersTime");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.ViewerTimeWithRank", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("ViewersTimeWithRank", (string)null);
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Wheel.Wheel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WinningMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Wheels");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Wheel.WheelProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("longtext");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Order")
                        .HasColumnType("float");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("float");

                    b.Property<int>("WheelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WheelId");

                    b.ToTable("WheelProperties");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.WordFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BanReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ExcludeRegulars")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ExcludeSubscribers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ExcludeVips")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRegex")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSilent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("PermaBan")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Phrase")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TimeOutLength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WordFilters");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.UserRegisteredVoice", b =>
                {
                    b.HasBaseType("DotNetTwitchBot.Bot.Models.RegisteredVoice");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("UserRegisteredVoice");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Commands.AudioCommand", b =>
                {
                    b.HasOne("DotNetTwitchBot.Bot.Models.Points.PointType", "PointType")
                        .WithMany()
                        .HasForeignKey("PointTypeId");

                    b.Navigation("PointType");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Commands.CustomCommands", b =>
                {
                    b.HasOne("DotNetTwitchBot.Bot.Models.Points.PointType", "PointType")
                        .WithMany()
                        .HasForeignKey("PointTypeId");

                    b.Navigation("PointType");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Commands.DefaultCommand", b =>
                {
                    b.HasOne("DotNetTwitchBot.Bot.Models.Points.PointType", "PointType")
                        .WithMany()
                        .HasForeignKey("PointTypeId");

                    b.Navigation("PointType");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Commands.ExternalCommands", b =>
                {
                    b.HasOne("DotNetTwitchBot.Bot.Models.Points.PointType", "PointType")
                        .WithMany()
                        .HasForeignKey("PointTypeId");

                    b.Navigation("PointType");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Commands.KeywordType", b =>
                {
                    b.HasOne("DotNetTwitchBot.Bot.Models.Points.PointType", "PointType")
                        .WithMany()
                        .HasForeignKey("PointTypeId");

                    b.Navigation("PointType");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Points.PointCommand", b =>
                {
                    b.HasOne("DotNetTwitchBot.Bot.Models.Points.PointType", "PointType")
                        .WithMany("PointCommands")
                        .HasForeignKey("PointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointType");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Points.UserPoints", b =>
                {
                    b.HasOne("DotNetTwitchBot.Bot.Models.Points.PointType", "PointType")
                        .WithMany("UserPoints")
                        .HasForeignKey("PointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointType");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Song", b =>
                {
                    b.HasOne("DotNetTwitchBot.Bot.Models.MusicPlaylist", "MusicPlaylist")
                        .WithMany("Songs")
                        .HasForeignKey("MusicPlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MusicPlaylist");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Timers.TimerMessage", b =>
                {
                    b.HasOne("DotNetTwitchBot.Bot.Models.Timers.TimerGroup", "TimerGroup")
                        .WithMany("Messages")
                        .HasForeignKey("TimerGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimerGroup");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Wheel.WheelProperty", b =>
                {
                    b.HasOne("DotNetTwitchBot.Bot.Models.Wheel.Wheel", "Wheel")
                        .WithMany("Properties")
                        .HasForeignKey("WheelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wheel");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.MusicPlaylist", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Points.PointType", b =>
                {
                    b.Navigation("PointCommands");

                    b.Navigation("UserPoints");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Timers.TimerGroup", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DotNetTwitchBot.Bot.Models.Wheel.Wheel", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
