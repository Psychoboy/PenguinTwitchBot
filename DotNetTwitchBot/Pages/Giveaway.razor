@page "/giveaway"
@using Microsoft.AspNetCore.SignalR.Client
@using DotNetTwitchBot.Bot.Models.Giveaway
@inject DotNetTwitchBot.Bot.Commands.Features.GiveawayFeature GiveawayFeature;
@inject NavigationManager Navigation

<PageTitle>Giveaway</PageTitle>

<MudPaper Class="pa-16 ma-2" Outlined="true">
    <MudText Typo="Typo.h1">Prize</MudText>
    <MudText Typo="Typo.h2">@prize</MudText>
</MudPaper>

<MudPaper Class="pa-16 ma-2" Outlined="true">
    <MudText Typo="Typo.h1">Winners</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Close">Close</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Draw">Draw</MudButton>
    @foreach (var winner in winners)
    {
        <MudText Typo="Typo.h2">@winner</MudText>
    }
</MudPaper>
@if (pastWinners == null)
{
    <MudAlert Severity="Severity.Info">Loading...</MudAlert>
}
else
{
    <MudPaper Class="pa-16 ma-2" Outlined="true">
        <MudText Typo="Typo.h3">Past Winners</MudText>
        <MudTable Items="@pastWinners">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Prize</MudTh>
                <MudTh>Date</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Username</MudTd>
                <MudTd DataLabel="Prize">@context.Prize</MudTd>
                <MudTd DataLabel="Date">@context.WinningDate.ToShortDateString()</MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
}
@code {
    private List<GiveawayWinner> winners = new List<GiveawayWinner>();
    private List<GiveawayWinner>? pastWinners;
    private string prize = "";
    private HubConnection? hubConnection;
    protected override async Task OnInitializedAsync()
    {
        pastWinners = await GiveawayFeature.PastWinners();
        prize = await GiveawayFeature.GetPrize();
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/giveawayhub")).Build();
        hubConnection.On<List<GiveawayWinner>>("Winners", (Winners) =>
        {
            winners = Winners;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("Prize", (Prize) =>
        {
            prize = Prize;
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
    }

    private async Task Draw()
    {
        await GiveawayFeature.Draw();
        pastWinners = await GiveawayFeature.PastWinners();
        StateHasChanged();
    }

    private async Task Close()
    {
        await GiveawayFeature.Close();
    }
}