@page "/audiocommands"
@attribute [Authorize(Roles = "Streamer")]
@inject Bot.Commands.AudioCommand.AudioCommands AudioCommand
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject DotNetTwitchBot.Bot.Commands.ICommandHelper CommandHelper

<PageTitle>SPTV Twitch Bot - Audio Commands</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>

        @if (audioCommands != null)
        {
            <MudItem xs="8">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudTable Items="@audioCommands">
                        <HeaderContent>
                            <MudTh>Commands</MudTh>
                            <MudTh>Audio File</MudTh>
                            <MudTh>Disabled</MudTh>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Command">!@context.Key</MudTd>
                            <MudTd DataLabel="AudioFile">@context.Value.AudioFile</MudTd>
                            <MudTd DataLabel="Disabled">@context.Value.Disabled</MudTd>
                            <MudTd DataLabel="Edit">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                @onclick="() => Edit(context.Value)">Edit
                                </MudButton>
                            </MudTd>
                                <MudTd DataLabel="Delete">
                                    <MudButton Variant="Variant.Filled" Color="Color.Error"
                                               @onclick="() => Delete(context.Value)">
                                        Edit
                                    </MudButton>
                                </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
        @if (audioCommand != null && audioFiles != null)
        {
            <MudItem xs="4">
                <MudPaper Elevation="2" Class="pa-4">
                    <EditForm Model="@audioCommand" OnValidSubmit="OnSubmit">
                        <DataAnnotationsValidator />
                        <MudTextField Label="Command" Required="true" RequiredError="Command is required"
                        @bind-Value="audioCommand.CommandName" />
                        <MudSelect @bind-Value="@audioCommand.AudioFile" Required="true" Label="Audio File"
                            RequiredError="Audio File is required">
                            @foreach (string file in audioFiles)
                            {
                                <MudSelectItem Value="@file">@file</MudSelectItem>
                            }
                        </MudSelect>
                        <MudTextField Label="Category"
                        @bind-Value="audioCommand.Category" />

                        <MudTextField Label="Description"
                        @bind-Value="audioCommand.Description" />
                        <MudNumericField @bind-Value="@audioCommand.UserCooldown" Label="User Cooldown"
                            Variant="Variant.Text">
                        </MudNumericField>
                        <MudNumericField @bind-Value="@audioCommand.GlobalCooldown" Label="Global Cooldown"
                            Variant="Variant.Text">
                        </MudNumericField>
                        <MudNumericField @bind-Value="@audioCommand.Cost" Label="Cost" Variant="Variant.Text">
                        </MudNumericField>
                        <MudCheckBox @bind-Value="@audioCommand.SayCooldown" Label="Say Cooldown?"></MudCheckBox>
                        <MudCheckBox @bind-Value="@audioCommand.SayRankRequirement" Label="Say Rank Requirement?">
                        </MudCheckBox>
                        <MudCheckBox @bind-Value="@audioCommand.Disabled" Label="Disabled?"></MudCheckBox>
                        <MudCheckBox @bind-Value="@audioCommand.RunFromBroadcasterOnly" Label="Run from own channel only?"></MudCheckBox>
                        <MudSelect @bind-Value="@audioCommand.MinimumRank" Label="Minimum Rank">
                            @foreach (Rank item in Enum.GetValues(typeof(Rank)))
                            {
                                <MudSelectItem Value="@item">@item</MudSelectItem>
                            }
                        </MudSelect>

                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                            Class="ml-auto">
                            Submit
                        </MudButton>
                    </EditForm>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private Dictionary<string, DotNetTwitchBot.Bot.Models.AudioCommand>? audioCommands;
    private List<string>? audioFiles;
    private DotNetTwitchBot.Bot.Models.AudioCommand? audioCommand { get; set; } = new();
    [Inject] private IDialogService DialogService { get; set; } = default!;
    protected override Task OnInitializedAsync()
    {
        audioCommands = AudioCommand.GetAudioCommands().OrderBy(x => x.Key).ToDictionary();
        audioFiles = AudioCommand.GetAudioFiles();
        return Task.CompletedTask;
    }

    private void ReloadCommands()
    {
        audioCommands = AudioCommand.GetAudioCommands().OrderBy(x => x.Key).ToDictionary();
        StateHasChanged();
    }

    public async void OnSubmit()
    {
        if (audioCommand == null) return;
        if (await CommandHelper.CommandExists(audioCommand.CommandName))
        {
            bool? result = await DialogService.ShowMessageBox(
               "Warning",
               "This command already exists, continue?",
               yesText: "Yes!", cancelText: "Cancel");
            if (result == null)
            {
                return;
            }
        }
        await AudioCommand.SaveAudioCommand(audioCommand);
        audioCommand = new();
        ReloadCommands();
    }

    private void Edit(DotNetTwitchBot.Bot.Models.AudioCommand item)
    {
        navigationManager.NavigateTo($"/audiocommands/{item.Id}");
    }

    private async void Delete(DotNetTwitchBot.Bot.Models.AudioCommand item)
    {
        bool? result = await DialogService.ShowMessageBox(
       "Warning",
       "Deleting can not be undone!",
       yesText: "Delete!", cancelText: "Cancel");
        if (result != null)
        {
            await AudioCommand.DeleteAudioCommand(item);
            ReloadCommands();
        }            
    }
}