@page "/defaultcommands/{id:int}"
@attribute [Authorize(Roles = "Streamer")]
@using System.ComponentModel.DataAnnotations
@inject DotNetTwitchBot.Bot.Commands.ICommandHandler CommandHandler
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject DotNetTwitchBot.Bot.Commands.ICommandHelper CommandHelper
<PageTitle>SPTV Twitch Bot - Edit Default Command</PageTitle>
<style type="text/css">
    .white-text {
        color: white;

    }
</style>

@if (defaultCommand == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudCard>
        <EditForm Model="defaultCommand" OnSubmit="OnSubmit">
            <DataAnnotationsValidator />
            <MudCardContent>
                <MudText Typo="Typo.subtitle1">
                    Module: @defaultCommand.ModuleName
                </MudText>
                <MudText Typo="Typo.subtitle1">
                    Default Command: @defaultCommand.CommandName
                </MudText>
                <MudText Typo="Typo.caption">Default command is system default command. If custom command is defined
                    differently, it will use that instead.</MudText>
                <MudTextField Label="Custom Command Name" Required="true" RequiredError="Custom Command Name is required"
                @bind-Value="defaultCommand.CustomCommandName" />
                <MudTextField Label="Category"
                @bind-Value="defaultCommand.Category" />

                <MudTextField Label="Description"
                @bind-Value="defaultCommand.Description" />
                <MudNumericField @bind-Value="@defaultCommand.UserCooldown" Label="User Cooldown" Variant="Variant.Text">
                </MudNumericField>
                <MudNumericField @bind-Value="@defaultCommand.GlobalCooldown" Label="Global Cooldown"
                    Variant="Variant.Text">
                </MudNumericField>
                <MudNumericField @bind-Value="@defaultCommand.Cost" Label="Cost" Variant="Variant.Text"></MudNumericField>
                <MudCheckBox @bind-Checked="@defaultCommand.SayCooldown" Label="Say Cooldown?"></MudCheckBox>
                <MudCheckBox @bind-Checked="@defaultCommand.SayRankRequirement" Label="Say Rank Requirement?"></MudCheckBox>
                <MudCheckBox @bind-Checked="@defaultCommand.Disabled" Label="Disabled?"></MudCheckBox>
                <MudSelect @bind-Value="@defaultCommand.MinimumRank" Label="Minimum Rank">
                    @foreach (Rank item in Enum.GetValues(typeof(Rank)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    Submit
                </MudButton>
            </MudCardContent>
        </EditForm>
    </MudCard>
}

@code
{
    [Parameter]
    public int id { get; set; }
    private DotNetTwitchBot.Bot.Models.DefaultCommand? defaultCommand;
    [Inject] private IDialogService DialogService { get; set; } = default!;

    protected override async void OnParametersSet()
    {
        defaultCommand = await CommandHandler.GetDefaultCommandById(id);
        StateHasChanged();
    }

    public async void OnSubmit()
    {
        if (defaultCommand == null) return;
        var originalCommand = await CommandHandler.GetDefaultCommandById(id);
        if (originalCommand != null)
        {
            if (!originalCommand.CustomCommandName.Equals(defaultCommand.CommandName, StringComparison.OrdinalIgnoreCase))
            {
                if (await CommandHelper.CommandExists(defaultCommand.CommandName))
                {
                    bool? result = await DialogService.ShowMessageBox(
                   "Warning",
                   "This command already exists, continue?",
                   yesText: "Yes!", cancelText: "Cancel");
                    if (result == null)
                    {
                        return;
                    }
                }
            }
        }
        await CommandHandler.UpdateDefaultCommand(defaultCommand);
        navigationManager.NavigateTo($"/defaultcommands");
    }

}