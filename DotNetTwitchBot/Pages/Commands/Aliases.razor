@page "/aliases"
@attribute [Authorize(Roles = "Streamer")]
@inject DotNetTwitchBot.Bot.Commands.Alias.IAlias AliasCommand
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject DotNetTwitchBot.Bot.Commands.ICommandHelper CommandHelper

<PageTitle>SPTV Twitch Bot - Aliases</PageTitle>
<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        @if (aliases != null)
        {
            <MudItem xs="8">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudTable Items="@aliases">
                        <HeaderContent>
                            <MudTh>Alias</MudTh>
                            <MudTh>Command</MudTh>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Alias">@context.AliasName</MudTd>
                            <MudTd DataLabel="Command">@context.CommandName</MudTd>
                            <MudTd DataLabel="Edit">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => Edit(context)">
                                    Edit</MudButton>
                            </MudTd>
                            <MudTd DataLabel="Delete">
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                                @onclick="() => Delete(context)">Delete
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
        @if (theAlias != null)
        {
            <MudItem xs="4">
                <MudPaper Elevation="2" Class="pa-4">
                    <EditForm Model="@theAlias" OnValidSubmit="OnSubmit">
                        <MudTextField Label="Alias" Required="true" RequiredError="Alias is required"
                        @bind-Value="theAlias.AliasName" />
                        <MudTextField Label="Command" Required="true" RequiredError="Command is required"
                        @bind-Value="theAlias.CommandName" />
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                            Class="ml-auto">
                            Submit
                        </MudButton>
                    </EditForm>
                </MudPaper>
            </MudItem>
        }

    </MudGrid>
</MudContainer>

@code {
    private List<DotNetTwitchBot.Bot.Models.AliasModel>? aliases;
    private DotNetTwitchBot.Bot.Models.AliasModel? theAlias { get; set; } = new();
    [Inject] private IDialogService DialogService { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        aliases = await AliasCommand.GetAliasesAsync();
    }

    public async void OnSubmit()
    {
        if (theAlias == null) return;
        if (await CommandHelper.CommandExists(theAlias.AliasName))
        {
            bool? result = await DialogService.ShowMessageBox(
               "Warning",
               "This command already exists, continue?",
               yesText: "Yes!", cancelText: "Cancel");
            if (result == null)
            {
                return;
            }
        }
        await AliasCommand.CreateOrUpdateAliasAsync(theAlias);
        aliases = await AliasCommand.GetAliasesAsync();
        theAlias = new();
        StateHasChanged();
    }

    private void Edit(DotNetTwitchBot.Bot.Models.AliasModel item)
    {
        navigationManager.NavigateTo($"/aliases/{item.Id}");
    }

    private async Task Delete(DotNetTwitchBot.Bot.Models.AliasModel item)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        if (result != null)
        {
            await AliasCommand.DeleteAliasAsync(item);
            aliases?.Remove(item);
        }
        StateHasChanged();
    }
}