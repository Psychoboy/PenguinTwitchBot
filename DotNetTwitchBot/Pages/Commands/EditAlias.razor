@page "/aliases/{id:int}"
@attribute [Authorize(Roles = "Streamer")]
@using System.ComponentModel.DataAnnotations
@inject DotNetTwitchBot.Bot.Commands.Custom.Alias AliasCommand
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject DotNetTwitchBot.Bot.Commands.ICommandHelper CommandHelper
<PageTitle>SPTV Twitch Bot - Edit Alias</PageTitle>
@if (theAlias == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudCard>
        <EditForm Model="@theAlias" OnValidSubmit="OnSubmit">
            <MudCardContent>
                <MudTextField Label="Alias" Required="true" RequiredError="Alias is required"
                @bind-Value="theAlias.AliasName" />
                <MudTextField Label="Command" Required="true" RequiredError="Command is required"
                @bind-Value="theAlias.CommandName" />
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    Submit
                </MudButton>
            </MudCardContent>
        </EditForm>
    </MudCard>
}

@code {
    [Parameter]
    public int id { get; set; }

    private DotNetTwitchBot.Bot.Models.AliasModel? theAlias { get; set; }
    [Inject] private IDialogService DialogService { get; set; } = default!;

    protected override async void OnParametersSet()
    {
        theAlias = await AliasCommand.GetAliasAsync(id);
        StateHasChanged();
    }

    public async void OnSubmit()
    {
        if (theAlias == null) return;
        var originalAlias = await AliasCommand.GetAliasAsync(id);
        if (originalAlias != null)
        {
            if (!originalAlias.AliasName.Equals(theAlias.AliasName, StringComparison.OrdinalIgnoreCase))
            {
                if (await CommandHelper.CommandExists(theAlias.AliasName))
                {
                    bool? result = await DialogService.ShowMessageBox(
                       "Warning",
                       "This command already exists, continue?",
                       yesText: "Yes!", cancelText: "Cancel");
                    if (result == null)
                    {
                        return;
                    }
                }
            }
        }
        await AliasCommand.CreateOrUpdateAliasAsync(theAlias);
        navigationManager.NavigateTo($"/aliases");
    }
}