@page "/audiocommands/{id:int}"
@attribute [Authorize(Roles = "Streamer")]
@using System.ComponentModel.DataAnnotations
@inject Bot.Commands.AudioCommand.AudioCommands AudioCommands
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject DotNetTwitchBot.Bot.Commands.ICommandHelper CommandHelper

<PageTitle>SPTV Twitch Bot - Edit Audio Command</PageTitle>
@if (audioCommand != null && audioFiles != null)
{
    <MudCard>
        <EditForm Model="@audioCommand" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
            <MudCardContent>
                <MudTextField Label="Command" Required="true" RequiredError="Command is required"
                @bind-Value="audioCommand.CommandName" />
                <MudSelect @bind-Value="@audioCommand.AudioFile" Required="true" Label="Audio File"
                    RequiredError="Audio File is required">
                    @foreach (string file in audioFiles)
                    {
                        <MudSelectItem Value="@file">@file</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Label="Category"
                @bind-Value="audioCommand.Category" />

                <MudTextField Label="Description"
                @bind-Value="audioCommand.Description" />
                <MudNumericField @bind-Value="@audioCommand.UserCooldown" Label="User Cooldown" Variant="Variant.Text">
                </MudNumericField>
                <MudNumericField @bind-Value="@audioCommand.GlobalCooldown" Label="Global Cooldown" Variant="Variant.Text">
                </MudNumericField>
                <MudNumericField @bind-Value="@audioCommand.Cost" Label="Cost" Variant="Variant.Text"></MudNumericField>
                <MudCheckBox @bind-Value="@audioCommand.SayCooldown" Label="Say Cooldown?"></MudCheckBox>
                <MudCheckBox @bind-Value="@audioCommand.SayRankRequirement" Label="Say Rank Requirement?"></MudCheckBox>
                <MudCheckBox @bind-Value="@audioCommand.Disabled" Label="Disabled?"></MudCheckBox>
                <MudCheckBox @bind-Value="@audioCommand.RunFromBroadcasterOnly" Label="Run from own channel only?"></MudCheckBox>
                <MudSelect @bind-Value="@audioCommand.MinimumRank" Label="Minimum Rank">
                    @foreach (Rank item in Enum.GetValues(typeof(Rank)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    Submit
                </MudButton>
            </MudCardContent>
        </EditForm>
    </MudCard>
}

@code {
    [Parameter]
    public int id { get; set; }

    private DotNetTwitchBot.Bot.Models.AudioCommand? audioCommand { get; set; }
    private List<string>? audioFiles;
    [Inject] private IDialogService DialogService { get; set; } = default!;

    protected override async void OnParametersSet()
    {
        audioCommand = await AudioCommands.GetAudioCommand(id);
        audioFiles = AudioCommands.GetAudioFiles();
        StateHasChanged();
    }

    public async void OnSubmit()
    {
        if (audioCommand == null) return;
        var originalAudioCommand = await AudioCommands.GetAudioCommand(id);
        if(originalAudioCommand != null)
        {
            if(!originalAudioCommand.CommandName.Equals(audioCommand.CommandName, StringComparison.OrdinalIgnoreCase))
            {
                if (await CommandHelper.CommandExists(audioCommand.CommandName))
                {
                    bool? result = await DialogService.ShowMessageBox(
                   "Warning",
                   "This command already exists, continue?",
                   yesText: "Yes!", cancelText: "Cancel");
                    if (result == null)
                    {
                        return;
                    }
                }
            }
        }
        await AudioCommands.SaveAudioCommand(audioCommand);
        navigationManager.NavigateTo($"/audiocommands");
    }
}