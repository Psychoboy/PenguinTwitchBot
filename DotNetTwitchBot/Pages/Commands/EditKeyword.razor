@page "/keywords/{id:int}"
@using DotNetTwitchBot.Bot.Core.Points
@using DotNetTwitchBot.Bot.Models.Commands
@attribute [Authorize(Roles = "Streamer, Editor")]

@using System.ComponentModel.DataAnnotations
@using DotNetTwitchBot.Bot.Models.Points
@inject DotNetTwitchBot.Bot.Commands.Custom.CustomCommand CustomCommand
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
<PageTitle>SPTV Twitch Bot - Edit Keyword Command</PageTitle>
@if (keyword == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <MudCard>
        <EditForm Model="@keyword" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
            <MudCardContent>
                <MudTextField Label="Keyword" Required="true" RequiredError="Keyword is required"
                @bind-Value="keyword.CommandName" />
                <MudCheckBox @bind-Value="@keyword.IsRegex" Label="Is Regex?"></MudCheckBox>
                <MudCheckBox @bind-Value="@keyword.IsCaseSensitive" Label="Is Case Sensitive?"></MudCheckBox>
                <MudTextField Label="Response" Required="true" RequiredError="Response is required"
                @bind-Value="keyword.Response" />
                <MudTextField Label="Category"
                @bind-Value="keyword.Category" />

                <MudTextField Label="Description"
                @bind-Value="keyword.Description" />
                <MudNumericField @bind-Value="@keyword.UserCooldown" Label="User Cooldown" Variant="Variant.Text">
                </MudNumericField>
                <MudNumericField @bind-Value="@keyword.GlobalCooldown" Label="Global Cooldown" Variant="Variant.Text">
                </MudNumericField>
                <MudNumericField @bind-Value="@keyword.Cost" Label="Cost" Variant="Variant.Text"></MudNumericField>
                <MudSelect Required="@(keyword.Cost != 0)" RequiredError="Point type is required if a cost is set" Label="Point Type" @bind-Value="keyword.PointType" ToStringFunc="@ConvertFunction">
                    @foreach (var pointType in PointTypes)
                    {
                        <MudSelectItem Value="@pointType" />
                    }
                </MudSelect>
                <MudCheckBox @bind-Value="@keyword.SayCooldown" Label="Say Cooldown?"></MudCheckBox>
                <MudCheckBox @bind-Value="@keyword.SayRankRequirement" Label="Say Rank Requirement?"></MudCheckBox>
                <MudCheckBox @bind-Value="@keyword.Disabled" Label="Disabled?"></MudCheckBox>
                <MudCheckBox @bind-Value="@keyword.RunFromBroadcasterOnly" Label="Run from own channel only?"></MudCheckBox>
                <MudSelect @bind-Value="@keyword.MinimumRank" Label="Minimum Rank">
                    @foreach (Rank item in Enum.GetValues(typeof(Rank)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Label="Specific User Only" @bind-Value="keyword.SpecificUserOnly" />
                <MudSelect Label="Specific Ranks" MultiSelection="true" @bind-SelectedValues="ranks">
                    @foreach (Rank item in Enum.GetValues(typeof(Rank)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
                <MudDivider />
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    Submit
                </MudButton>
            </MudCardContent>
        </EditForm>
    </MudCard>
}

@code {
    [Parameter]
    public int id { get; set; }

    private KeywordType? keyword { get; set; }
    IEnumerable<Rank> ranks = new HashSet<Rank>();
    [Inject] IPointsSystem pointSystem { get; set; } = default!;
    private IEnumerable<PointType> PointTypes { get; set; } = [];

    protected override async void OnParametersSet()
    {
        keyword = await CustomCommand.GetKeyword(id);
        ranks = keyword != null ? keyword.SpecificRanks : new HashSet<Rank>();
        StateHasChanged();
    }

    public async void OnSubmit()
    {
        if (keyword == null) return;
        keyword.SpecificRanks = ranks.ToList();
        ranks = new HashSet<Rank>();
        await CustomCommand.SaveKeyword(keyword);
        navigationManager.NavigateTo($"/keywords");
    }

    private string ConvertFunction(PointType? pointType)
    {
        if (pointType != null)
        {
            return pointType.Name;
        }
        return "";
    }
}