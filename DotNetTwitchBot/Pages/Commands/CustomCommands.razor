@page "/customcommands"
@attribute [Authorize(Roles = "Streamer")]
@inject DotNetTwitchBot.Bot.Commands.Custom.CustomCommand CustomCommand
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject DotNetTwitchBot.Bot.Commands.ICommandHelper CommandHelper

<PageTitle>SPTV Twitch Bot - Custom Commands</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        @if (commands != null)
        {
            <MudItem xs="9">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudTable Items="@commands">
                        <HeaderContent>
                            <MudTh>Command</MudTh>
                            <MudTh>Response</MudTh>
                            <MudTh>Disabled</MudTh>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Command">!@context.Key</MudTd>
                            <MudTd DataLabel="Response">@context.Value.Response</MudTd>
                            <MudTd DataLabel="Disabled">@context.Value.Disabled</MudTd>
                            <MudTd DataLabel="Edit">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                @onclick="() => Edit(context.Value)">Edit
                                </MudButton>
                            </MudTd>
                            <MudTd DataLabel="Delete">
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                                @onclick="() => Delete(context.Value)">Delete
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
        @if (customCommand != null)
        {
            <MudItem xs="3">
                <MudPaper Elevation="2" Class="pa-4">
                    <EditForm Model="@customCommand" OnValidSubmit="OnSubmit">
                        <DataAnnotationsValidator />
                        <MudTextField Label="Command" Required="true" RequiredError="Command is required"
                        @bind-Value="customCommand.CommandName" />
                        <MudTextField Label="Response" Lines="8" Required="true" RequiredError="Response is required"
                        @bind-Value="customCommand.Response" />
                        <MudButton @onclick="OpenHelp" Variant="Variant.Filled" Color="Color.Primary">Open Help</MudButton>
                        <MudTextField Label="Category"
                        @bind-Value="customCommand.Category" />

                        <MudTextField Label="Description"
                        @bind-Value="customCommand.Description" />
                        <MudNumericField @bind-Value="@customCommand.UserCooldown" Label="User Cooldown"
                            Variant="Variant.Text">
                        </MudNumericField>
                        <MudNumericField @bind-Value="@customCommand.GlobalCooldown" Label="Global Cooldown"
                            Variant="Variant.Text">
                        </MudNumericField>
                        <MudNumericField @bind-Value="@customCommand.Cost" Label="Cost" Variant="Variant.Text">
                        </MudNumericField>
                        <MudCheckBox @bind-Value="@customCommand.SayCooldown" Label="Say Cooldown?"></MudCheckBox>
                        <MudCheckBox @bind-Value="@customCommand.SayRankRequirement" Label="Say Rank Requirement?">
                        </MudCheckBox>
                        <MudCheckBox @bind-Value="@customCommand.RespondAsStreamer" Label="Respond as Streamer?">
                        </MudCheckBox>
                        <MudCheckBox @bind-Value="@customCommand.ExcludeFromUi" Label="Exclude from web interface?" />
                        <MudCheckBox @bind-Value="@customCommand.Disabled" Label="Disabled?"></MudCheckBox>
                        <MudCheckBox @bind-Value="@customCommand.RunFromBroadcasterOnly" Label="Run from own channel only?"></MudCheckBox>
                        <MudSelect @bind-Value="@customCommand.MinimumRank" Label="Minimum Rank">
                            @foreach (Rank item in Enum.GetValues(typeof(Rank)))
                            {
                                <MudSelectItem Value="@item">@item</MudSelectItem>
                            }
                        </MudSelect>
                        <MudTextField Label="Specific User Only" @bind-Value="customCommand.SpecificUserOnly" />
                        <MudSelect Label="Specific Ranks" MultiSelection="true" @bind-SelectedValues="ranks">
                            @foreach (Rank item in Enum.GetValues(typeof(Rank)))
                            {
                                <MudSelectItem Value="@item">@item</MudSelectItem>
                            }
                        </MudSelect>
                        <MudDivider />
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                            Class="ml-auto">
                            Create
                        </MudButton>
                    </EditForm>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private Dictionary<string, Bot.Models.Commands.CustomCommands>? commands;
    private Bot.Models.Commands.CustomCommands customCommand { get; set; } = new();
    [Inject] private IDialogService DialogService { get; set; } = default!;
    IEnumerable<Rank> ranks = new HashSet<Rank>();
    protected override Task OnInitializedAsync()
    {
        commands = CustomCommand.GetCustomCommands().OrderBy(x => x.Key).ToDictionary();
        return Task.CompletedTask;
    }

    public async void OnSubmit()
    {
        if (customCommand == null) return;
        if(await CommandHelper.CommandExists(customCommand.CommandName))
        {
            bool? result = await DialogService.ShowMessageBox(
               "Warning",
               "This command already exists, continue?",
               yesText: "Yes!", cancelText: "Cancel");
            if(result == null)
            {
                return;
            }
        }
        customCommand.SpecificRanks = ranks.ToList();
        ranks = new HashSet<Rank>();
        await CustomCommand.AddCommand(customCommand);
        customCommand = new();
        ReloadCommands();
    }

    private void ReloadCommands()
    {
        commands = CustomCommand.GetCustomCommands().OrderBy(x => x.Key).ToDictionary();
        StateHasChanged();
    }

    private async Task Delete(Bot.Models.Commands.CustomCommands item)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        if (result != null)
        {
            await CustomCommand.DeleteCommand(item);
            ReloadCommands();
        }
    }

    private void Edit(Bot.Models.Commands.CustomCommands item)
    {
        navigationManager.NavigateTo($"/customcommands/{item.Id}");
    }

    private Task OpenHelp()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
        return DialogService.ShowAsync<CustomCommandHelp>("Custom Command Help", options);
    }
}