@page "/customcommands/{id:int}"
@attribute [Authorize(Roles = "Streamer")]

@using System.ComponentModel.DataAnnotations
@inject DotNetTwitchBot.Bot.Commands.Custom.CustomCommand CustomCommand
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject DotNetTwitchBot.Bot.Commands.ICommandHelper CommandHelper

<PageTitle>SPTV Twitch Bot - Edit Command</PageTitle>
@if (customCommand == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <MudCard>
        <EditForm Model="@customCommand" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
            <MudCardContent>
                <MudTextField Label="Command" Required="true" RequiredError="Command is required"
                @bind-Value="customCommand.CommandName" />
                <MudTextField Label="Response" Lines="5" Required="true" RequiredError="Response is required"
                @bind-Value="customCommand.Response" />
                <MudTextField Label="Category"
                @bind-Value="customCommand.Category" />

                <MudTextField Label="Description"
                @bind-Value="customCommand.Description" />
                <MudNumericField @bind-Value="@customCommand.UserCooldown" Label="User Cooldown" Variant="Variant.Text">
                </MudNumericField>
                <MudNumericField @bind-Value="@customCommand.GlobalCooldown" Label="Global Cooldown" Variant="Variant.Text">
                </MudNumericField>
                <MudNumericField @bind-Value="@customCommand.Cost" Label="Cost" Variant="Variant.Text"></MudNumericField>
                <MudCheckBox @bind-Value="@customCommand.SayCooldown" Label="Say Cooldown?"></MudCheckBox>
                <MudCheckBox @bind-Value="@customCommand.SayRankRequirement" Label="Say Rank Requirement?"></MudCheckBox>
                <MudCheckBox @bind-Value="@customCommand.RespondAsStreamer" Label="Respond as Streamer?">
                </MudCheckBox>
                <MudCheckBox @bind-Value="@customCommand.ExcludeFromUi" Label="Exclude from web interface?" />
                <MudCheckBox @bind-Value="@customCommand.Disabled" Label="Disabled?"></MudCheckBox>
                <MudCheckBox @bind-Value="@customCommand.RunFromBroadcasterOnly" Label="Run from own channel only?"></MudCheckBox>
                <MudSelect @bind-Value="@customCommand.MinimumRank" Label="Minimum Rank">
                    @foreach (Rank item in Enum.GetValues(typeof(Rank)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    Submit
                </MudButton>
            </MudCardContent>
        </EditForm>
    </MudCard>
}

@code {
    [Parameter]
    public int id { get; set; }

    private DotNetTwitchBot.Bot.Models.CustomCommands? customCommand { get; set; }
    [Inject] private IDialogService DialogService { get; set; } = default!;

    protected override async void OnParametersSet()
    {
        customCommand = await CustomCommand.GetCustomCommand(id);
        StateHasChanged();
    }

    public async void OnSubmit()
    {
        if (customCommand == null) return;
        var originalCommand = await CustomCommand.GetCustomCommand(id);
        if (originalCommand != null)
        {
            if (!originalCommand.CommandName.Equals(customCommand.CommandName, StringComparison.OrdinalIgnoreCase))
            {
                if (await CommandHelper.CommandExists(customCommand.CommandName))
                {
                    bool? result = await DialogService.ShowMessageBox(
                   "Warning",
                   "This command already exists, continue?",
                   yesText: "Yes!", cancelText: "Cancel");
                    if (result == null)
                    {
                        return;
                    }
                }
            }
        }
        await CustomCommand.SaveCommand(customCommand);
        navigationManager.NavigateTo($"/customcommands");
    }
}