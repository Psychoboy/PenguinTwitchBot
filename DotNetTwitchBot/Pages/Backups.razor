@page "/backups"
@inject DotNetTwitchBot.Bot.Commands.Moderation.Admin Admin
@using DotNetTwitchBot.Bot.DatabaseTools
@attribute [Authorize(Roles = "Streamer")]

<PageTitle>SPTV Twitch Bot - Backups</PageTitle>

<MudContainer Class="pa-6" MaxWidth="MaxWidth.False">
    <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="BackupDatabase">Backup Database</MudButton>
    <MudTable Items="@DatabaseBackups">
        <HeaderContent>
            <MudTh>File Name</MudTh>
            <MudTh>Creation Time</MudTh>
            <MudTh>Size</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.CreationTime</MudTd>
            <MudTh>@FormatBytes(@context.Length)</MudTh>
            <MudTd>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" 
                @onclick="() => RestoreBackup(context)">Restore Backup</MudButton></MudTd>
        </RowTemplate>
     </MudTable>
</MudContainer>

@code {

    private List<FileInfo> DatabaseBackups = [];
    [Inject] private IDialogService DialogService { get; set; } = default!;

    protected override void OnInitialized()
    {
        DatabaseBackups = BackupTools.GetBackupFiles(BackupTools.BACKUP_DIRECTORY).OrderByDescending(x => x.CreationTime).ToList();
    }

    private async Task BackupDatabase()
    {
        await Admin.BackupDatabase();
        DatabaseBackups = BackupTools.GetBackupFiles(BackupTools.BACKUP_DIRECTORY).OrderByDescending(x => x.CreationTime).ToList();
    }

    private async Task RestoreBackup(FileInfo fileInfo)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Are you sure you want to restore this database? Doing so will wipe current data!",
        yesText: "Restore!", cancelText: "Cancel");
        if (result != null)
        {
            try
            {
                await Admin.RestoreDatabase(fileInfo.FullName);
                await DialogService.ShowMessageBox("Success", "Database restored successfully!");
            }
            catch (Exception e)
            {
                await DialogService.ShowMessageBox("Error", e.Message);
            }
        }
    }
    private static string FormatBytes(Int64 bytes)
    {
        if (bytes >= 0x1000000000000000) { return ((double)(bytes >> 50) / 1024).ToString("0.### EB"); }
        if (bytes >= 0x4000000000000) { return ((double)(bytes >> 40) / 1024).ToString("0.### PB"); }
        if (bytes >= 0x10000000000) { return ((double)(bytes >> 30) / 1024).ToString("0.### TB"); }
        if (bytes >= 0x40000000) { return ((double)(bytes >> 20) / 1024).ToString("0.### GB"); }
        if (bytes >= 0x100000) { return ((double)(bytes >> 10) / 1024).ToString("0.### MB"); }
        if (bytes >= 0x400) { return ((double)(bytes) / 1024).ToString("0.###") + " KB"; }
        return bytes.ToString("0 Bytes");
    }
}
