@page "/"
@inject DotNetTwitchBot.Bot.Commands.Moderation.Admin Admin
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
<CascadingAuthenticationState>  
    <AuthorizeView Roles="Streamer">
        <Authorized>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PauseAlerts">Pause Alerts</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ResumeAlerts">Resume Alerts</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Reconnect">Reconnect</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ForceOnline">Force Online</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ForceOffline">Force Offline</MudButton>
</Authorized>
</AuthorizeView>
</CascadingAuthenticationState>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is null || !user.Identity.IsAuthenticated || !user.IsInRole("Streamer"))
        {
            Navigation.NavigateTo("/viewergiveaway");
        }
    }


    private async Task PauseAlerts()
    {
        await Admin.PauseAlerts();
    }

    private async Task ResumeAlerts()
    {
        await Admin.ResumeAlerts();
    }

    private async Task Reconnect()
    {
        await Admin.ReconnectTwitchWebsocket();
    }

    private async Task ForceOnline()
    {
        await Admin.ForceStreamOnline();
    }

    private async Task ForceOffline()
    {
        await Admin.ForceStreamOffline();
    }
}