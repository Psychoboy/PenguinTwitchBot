@page "/"
@using DotNetTwitchBot.Models
@using Microsoft.AspNetCore.SignalR.Client
@using DotNetTwitchBot.Bot;
@using DotNetTwitchBot.Pages.ViewerViews.Components;
@inject DotNetTwitchBot.Bot.Commands.Moderation.Admin Admin
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject DotNetTwitchBot.Bot.Commands.Music.YtPlayer YtPlayer
@inject DotNetTwitchBot.Bot.Core.Leaderboards leaderBoards
@inject DotNetTwitchBot.Bot.Commands.Metrics.SongRequests SongRequestMetrics
@inject DotNetTwitchBot.Bot.Core.IChatHistory ChatHistory
@inject DotNetTwitchBot.Bot.StreamSchedule.ISchedule Schedule
@inject ISnackbar Snackbar
@inject ILogger<Index> logger
@implements IAsyncDisposable

<CascadingAuthenticationState>  
    <MudContainer Class="pa-6" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem sm="6">
                <BonusTickets/>
                <GiveawayPreview/>
            </MudItem>
            <MudItem sm="6">
                <StreamSchedule />
            </MudItem>
            <MudItem sm="6">
                <SongRequests IsPreview="true" LimitNumberOfSongs="5" Title="Next 5 Song Requests" />
            </MudItem>
            
            <MudItem sm="6">
                <TopRequestedSongs IsPreview="true" Title="Top 5 Requested Songs" />
            </MudItem>
        </MudGrid>
    </MudContainer>
</CascadingAuthenticationState>

@code {
    private List<Song> songRequests = new();
    private HubConnection? ythub;
    private List<Bot.Models.Metrics.SongRequestHistoryWithRank> topSongRequests = new();
    protected override async Task OnInitializedAsync()
    {
        topSongRequests = await SongRequestMetrics.GetTopN(5);
        UpdateSongList(YtPlayer.GetRequestedSongs());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;
        ythub = new HubConnectionBuilder().WithAutomaticReconnect()
        .WithUrl(Navigation.ToAbsoluteUri("/ythub")).Build();

        ythub.On<List<Song>>("CurrentSongRequests", async (playlist) =>
        {
            if (songRequests.Count == 0 && playlist.Count == 0) return;
            UpdateSongList(playlist);
            await InvokeAsync(StateHasChanged);
        });
        try
        {
            await ythub.StartAsync();
        }
        catch (TaskCanceledException)
        {
            Snackbar.Add("Lost connection to bot. Data may be inaccurate until refresh.", Severity.Warning);
            logger.LogWarning("User lost connection to bot.");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Lost connection to bot. Data may be inaccurate until refresh.", Severity.Warning);
            logger.LogWarning(ex, "Failed to connect to ythub");
        }
    }

    private void UpdateSongList(List<Song> songs)
    {
        if (songs.Count > 5)
        {
            songs = songs.Slice(0, 5);
        }
        songRequests = songs;
    }

    private async Task PauseAlerts()
    {
        await Admin.PauseAlerts();
    }

    private async Task ResumeAlerts()
    {
        await Admin.ResumeAlerts();
    }

    private async Task Reconnect()
    {
        await Admin.ReconnectTwitchWebsocket();
    }

    private async Task ForceOnline()
    {
        await Admin.ForceStreamOnline();
    }

    private async Task ForceOffline()
    {
        await Admin.ForceStreamOffline();
    }

    private async Task UpdateSongs()
    {
        await Admin.UpdateSongs();
    }

    private Task CleanupChat()
    {
        return ChatHistory.CleanOldLogs();
    }

    private async Task UpdateSchedule()
    {
        await Schedule.UpdateEvents();
    }

    public async ValueTask DisposeAsync()
    {
        if (ythub is not null)
        {
            await ythub.DisposeAsync();
        }
    }

    private string GetYoutubeLink(string songId)
    {
        return $"https://youtu.be/{songId}";
    }
}