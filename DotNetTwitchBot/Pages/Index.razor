@page "/"
@using DotNetTwitchBot.Bot.StreamSchedule
@using DotNetTwitchBot.Models
@using Microsoft.AspNetCore.SignalR.Client
@using DotNetTwitchBot.Bot;
@using DotNetTwitchBot.Pages.ViewerViews.Components;
@inject DotNetTwitchBot.Bot.Commands.Moderation.Admin Admin
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject DotNetTwitchBot.Bot.Commands.Music.YtPlayer YtPlayer
@inject DotNetTwitchBot.Bot.Commands.Features.GiveawayFeature GiveawayFeature;
@inject DotNetTwitchBot.Bot.Core.Leaderboards leaderBoards
@inject DotNetTwitchBot.Bot.Commands.Metrics.SongRequests SongRequestMetrics
@inject ISchedule schedule;
@inject ISnackbar Snackbar
@inject ILogger<Index> logger
@implements IAsyncDisposable

<CascadingAuthenticationState>  
    <AuthorizeView Roles="Streamer">
        <Authorized>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PauseAlerts">Pause Alerts</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ResumeAlerts">Resume Alerts</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Reconnect">Reconnect</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ForceOnline">Force Online</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ForceOffline">Force Offline</MudButton>
        </Authorized>
        <NotAuthorized>
        </NotAuthorized>
    </AuthorizeView>
    <MudContainer Class="pa-6" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem sm="6">
                <BonusTickets/>
                <MudPaper Class="pa-4" Elevation="0">
                    <MudPaper Class="align-start d-flex" >
                        <MudText Typo="Typo.h5" class="mud-contrast-text">Giveaway</MudText>
                        <MudSpacer />
                        <MudLink Href="viewergiveaway">Details</MudLink>
                    </MudPaper>
                    <MudDivider class="mb-2" />
                    <center>
                        <MudText Typo="Typo.h5">@prize</MudText>
                        <MudImage Fluid="true" Class="rounded mt-4 px-2" Src="@imageUrl" />
                    </center>
                </MudPaper>
            </MudItem>
            <MudItem sm="6">
                <MudPaper Class="pa-4" Elevation="0">
                    <MudPaper Class="align-start d-flex">
                        <MudText Typo="Typo.h5" class="mud-contrast-text">Stream Schedule</MudText>
                    </MudPaper>
                    <MudDivider class="mb-2" />
                    <MudTable Items="@scheduledStreams" Elevation="0">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Start</MudTh>
                            <MudTh>End</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Title</MudTd>
                            <MudTd><ToLocal DateTime="context.Start" Format="dddd, mmmm d h:MM:ss TT"></ToLocal></MudTd>
                            <MudTd><ToLocal DateTime="context.End" Format="dddd, mmmm d h:MM:ss TT"></ToLocal></MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
            <MudItem sm="6">
                <MudPaper Class="pa-4" Elevation="0">
                    <MudPaper Class="align-start d-flex">
                        <MudText Typo="Typo.h5" class="mud-contrast-text">Next 5 Song Requests</MudText>
                        <MudSpacer />
                        <MudLink Href="songrequests">Details</MudLink>
                    </MudPaper>
                    <MudDivider class="mb-2" />
                    <MudTable Items="@songRequests" Elevation="0">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Length</MudTh>
                            <MudTh>Requested By</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.Title</MudTd>
                            <MudTd DataLabel="Duration">@context.Duration</MudTd>
                            <MudTd DataLabel="Requested By">@context.RequestedBy</MudTd>

                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
            
            <MudItem sm="6">
                <MudPaper Class="pa-4" Elevation="0">
                    <MudPaper Class="align-start d-flex">
                        <MudText Typo="Typo.h5" class="mud-contrast-text">Top 5 Requested Songs</MudText>
                        <MudSpacer />
                            <MudLink Href="songRequests">Details</MudLink>
                    </MudPaper>
                    <MudTable Items="@topSongRequests" Elevation="0">
                        <HeaderContent>
                            <MudTh>Rank</MudTh>
                            <MudTh>Title</MudTh>
                            <MudTh>Length</MudTh>
                            <MudTh>Times Requested</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Ranking">@context.Ranking</MudTd>
                            <MudTd DataLabel="Name">@context.Title</MudTd>
                            <MudTd DataLabel="Duration">@context.Duration</MudTd>
                            <MudTd DataLabel="TimesRequested">@context.RequestedCount</MudTd>
                            <MudTd DataLabel="ytlink"><MudLink Href=@GetYoutubeLink(context.SongId) Target="_blank">Video</MudLink></MudTd>

                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
</CascadingAuthenticationState>

@code {
    private string prize = "";
    private string? imageUrl;
    private List<Song> songRequests = new();
    private HubConnection? ythub;
    private List<Bot.Models.Metrics.SongRequestHistoryWithRank> topSongRequests = new();
    private List<ScheduledStream> scheduledStreams = new();
    protected override async Task OnInitializedAsync()
    {
        prize = await GiveawayFeature.GetPrize();
        imageUrl = await GiveawayFeature.GetImageUrl();
        topSongRequests = await SongRequestMetrics.GetTopN(5);
        scheduledStreams = (await schedule.GetNextStreams()).Take(5).ToList();
        UpdateSongList(YtPlayer.GetRequestedSongs());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;
        ythub = new HubConnectionBuilder().WithAutomaticReconnect()
        .WithUrl(Navigation.ToAbsoluteUri("/ythub")).Build();

        ythub.On<List<Song>>("CurrentSongRequests", async (playlist) =>
        {
            if (songRequests.Count == 0 && playlist.Count == 0) return;
            UpdateSongList(playlist);
            await InvokeAsync(StateHasChanged);
        });
        try
        {
            await ythub.StartAsync();
        }
        catch (TaskCanceledException)
        {
            Snackbar.Add("Lost connection to bot. Data may be inaccurate until refresh.", Severity.Warning);
            logger.LogWarning("User lost connection to bot.");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Lost connection to bot. Data may be inaccurate until refresh.", Severity.Warning);
            logger.LogWarning(ex, "Failed to connect to ythub");
        }
    }

    private void UpdateSongList(List<Song> songs)
    {
        if (songs.Count > 5)
        {
            songs = songs.Slice(0, 5);
        }
        songRequests = songs;
    }

    private async Task PauseAlerts()
    {
        await Admin.PauseAlerts();
    }

    private async Task ResumeAlerts()
    {
        await Admin.ResumeAlerts();
    }

    private async Task Reconnect()
    {
        await Admin.ReconnectTwitchWebsocket();
    }

    private async Task ForceOnline()
    {
        await Admin.ForceStreamOnline();
    }

    private async Task ForceOffline()
    {
        await Admin.ForceStreamOffline();
    }

    private async Task UpdateSongs()
    {
        await Admin.UpdateSongs();
    }

    private async Task UpdateDiscordEvents()
    {
        await schedule.UpdateEvents();
    }

    private async Task PostSchedule()
    {
        await schedule.PostSchedule();
    }

    public async ValueTask DisposeAsync()
    {
        if (ythub is not null)
        {
            await ythub.DisposeAsync();
        }
    }

    private string GetYoutubeLink(string songId)
    {
        return $"https://youtu.be/{songId}";
    }
}