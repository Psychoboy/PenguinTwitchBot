@page "/timermessages/{id:int}"
@attribute [Authorize(Roles = "Streamer")]

@using System.ComponentModel.DataAnnotations
@inject DotNetTwitchBot.Bot.Commands.Misc.Timers Timers
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
<PageTitle>SPTV Twitch Bot - Timer Group Edit</PageTitle>

@if (timerGroup != null)
{
    <MudGrid>
        <MudItem xs="6">
            <MudPaper Elevation="2" Class="pa-4">
                <MudTextField @bind-Value="Message" Label="Add Message" Variant="Variant.Text"></MudTextField>
                <MudButton OnClick="AddMessage" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                    Color="Color.Primary" Class="ml-auto">
                    Add Message
                </MudButton>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Elevation="2" Class="pa-4">
                <MudText Typo="Typo.h6">Edit Timer Group</MudText>
                <EditForm Model="@timerGroup" OnValidSubmit="OnEdit">
                    <DataAnnotationsValidator />
                    <MudTextField Label="Name" Required="true" RequiredError="Name is required"
                    @bind-Value="timerGroup.Name" />
                    <MudNumericField @bind-Value="@timerGroup.IntervalMinimum" Label="Minimum Interval"
                        Variant="Variant.Text">
                    </MudNumericField>
                    <MudNumericField @bind-Value="@timerGroup.IntervalMaximum" Label="Maximum Interval"
                        Variant="Variant.Text">
                    </MudNumericField>
                    <MudNumericField @bind-Value="@timerGroup.MinimumMessages" Label="Minimum Messages"
                        Variant="Variant.Text">
                    </MudNumericField>

                    <MudCheckBox @bind-Checked="@timerGroup.Active" Label="Enabled?"></MudCheckBox>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                        Class="ml-auto">
                        Submit
                    </MudButton>
                </EditForm>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4">
                <MudTable Items="@timerGroup.Messages">
                    <HeaderContent>
                        <MudTh>Message</MudTh>
                        <MudTh>Enabled</MudTh>
                        <MudTh></MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Message">@context.Message</MudTd>
                        <MudTd DataLabel="Enabled">@context.Enabled</MudTd>
                        <MudTd DataLabel="Toggle">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => Toggle(context)">Edit
                            </MudButton>
                        </MudTd>
                        <MudTd DataLabel="Delete">
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="() => Delete(context)">
                                Delete
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code
{
    [Parameter]
    public int id { get; set; }

    private string? Message;
    private DotNetTwitchBot.Bot.Models.Timers.TimerGroup? timerGroup;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    protected override async void OnParametersSet()
    {
        timerGroup = await Timers.GetTimerGroupAsync(id);
        StateHasChanged();
    }

    private async Task Toggle(DotNetTwitchBot.Bot.Models.Timers.TimerMessage message)
    {
        message.Enabled = !message.Enabled;
        await Timers.UpdateTimerMessage(message);
        timerGroup = await Timers.GetTimerGroupAsync(id);
        StateHasChanged();
    }

    private async Task Delete(DotNetTwitchBot.Bot.Models.Timers.TimerMessage message)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        if (result != null)
        {
            await Timers.DeleteTimerMessage(message);
            timerGroup = await Timers.GetTimerGroupAsync(id);
            StateHasChanged();
        }
    }

    private async Task AddMessage()
    {
        if (timerGroup != null && string.IsNullOrWhiteSpace(Message) == false)
        {
            var message = new DotNetTwitchBot.Bot.Models.Timers.TimerMessage
                {
                    Message = Message,
                    Enabled = true
                };
            timerGroup.Messages.Add(message);
            await Timers.UpdateTimerGroup(timerGroup);
            StateHasChanged();
        }
    }
    public async void OnEdit()
    {
        if (timerGroup == null) return;
        await Timers.UpdateTimerGroup(timerGroup);
        StateHasChanged();
    }
}