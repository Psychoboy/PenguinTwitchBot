@page "/playlists"
@using Microsoft.AspNetCore.SignalR.Client
@inject DotNetTwitchBot.Bot.Commands.Music.YtPlayer YtPlayer
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Playlists</PageTitle>
<style type="text/css">
    .white-text {
        color: white;

    }
</style>

@if (currentSong != null)
{
    <div>Current Song: @currentSong.Title</div>
    <div>Requested By: @currentSong.RequestedBy</div>
    <div><button class="btn btn-primary btn-xs" @onclick="() => StealSong()">Steal Song</button></div>
}

@if (songRequests != null)
{
    <div>Requested Songs: @songRequests.Count</div>
    <table class="table white-text">
        <thead>
            <tr>
                <th>Title</th>
                <th>Length</th>
                <th>Requested By</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var song in songRequests)
            {
                <tr>
                    <td>@song.Title</td>
                    <td>@song.Duration</td>
                    <td>@song.RequestedBy</td>

                    <td><button class="btn btn-primary btn-xs" @onclick="() => RemoveSongRequest(song)">Remove</button></td>
                </tr>
            }
        </tbody>
    </table>
}
@if (musicPlaylists == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table white-text">
        <thead>
            <tr>
                <th>Title</th>
                <th>Load</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var playlist in musicPlaylists)
            {
                <tr>
                    <td>@playlist.Name</td>
                    <td><button class="btn btn-primary btn-xs" @onclick="() => ViewList(playlist)">View</button></td>
                    <td><button class="btn btn-primary btn-xs" @onclick="() => StartPlaylist(playlist)">Load</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@if (currentPlayList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>Current Playlist: @currentPlayList.Name Total Songs: @currentPlayList.Songs.Count()</div>
    <table class="table white-text">
        <thead>
            <tr>
                <th>Title</th>
                <th>Length</th>
                <th>Song Id</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var song in currentPlayList.Songs)
            {
                <tr>
                    <td>@song.Title</td>
                    <td>@song.Duration</td>
                    <td>@song.SongId</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<MusicPlaylist>? musicPlaylists;
    private MusicPlaylist? currentPlayList;
    private Song? currentSong;
    private List<Song>? songRequests;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        musicPlaylists = await YtPlayer.Playlists();
        currentPlayList = await YtPlayer.CurrentPlaylist();
        currentSong = YtPlayer.GetCurrentSong();
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/ythub")).Build();

        hubConnection.On<Song?>("CurrentSongUpdate", (song) =>
        {
            currentSong = song;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<MusicPlaylist>("UpdateCurrentPlaylist", (playlist) =>
        {
            currentPlayList = playlist;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<Song>>("CurrentSongRequests", (playlist) =>
        {
            songRequests = playlist;
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
    }

    private void ViewList(MusicPlaylist musicPlaylist)
    {
        navigationManager.NavigateTo($"/viewplaylist/{musicPlaylist.Id}");
    }

    private async Task StartPlaylist(MusicPlaylist musicPlaylist)
    {
        if (musicPlaylist != null && musicPlaylist.Id != null)
        {
            await YtPlayer.LoadPlayList((int)musicPlaylist.Id);
            StateHasChanged();
        }
    }

    private async Task RemoveSong(Song song)
    {
        await YtPlayer.RemoveSong(song);
    }

    private async Task RemoveSongRequest(Song song)
    {
        await YtPlayer.RemoveSongRequest(song);
    }


    private async Task StealSong()
    {
        await YtPlayer.StealCurrentSong();
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}