@page "/playlists"
@attribute [Authorize(Roles = "Streamer")]
@using Microsoft.AspNetCore.SignalR.Client
@inject DotNetTwitchBot.Bot.Commands.Music.YtPlayer YtPlayer
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject ISnackbar Snackbar
@inject ILogger<PlayLists> logger

<PageTitle>SPTV Twitch Bot - Playlists</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">

    <MudGrid>
        @if (currentSong != null)
        {
            <MudItem sm="6" md="4">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText>Current Song: @currentSong.Title</MudText>
                    <MudText>Requested By: @currentSong.RequestedBy</MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="StealSong">Steal Song</MudButton>
                </MudPaper>
            </MudItem>

        }

        @if (songRequests != null)
        {
            <MudItem xs="8">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h6">Song Requests: @songRequests.Count</MudText>
                    <MudTable Items="@songRequests">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Length</MudTh>
                            <MudTh>Requested By</MudTh>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.Title</MudTd>
                            <MudTd DataLabel="Duration">@context.Duration</MudTd>
                            <MudTd DataLabel="Requested By">@context.RequestedBy</MudTd>
                            <MudTd DataLabel="Edit">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                @onclick="() => Priority(context)">
                                    Priority</MudButton>
                            </MudTd>
                            <MudTd DataLabel="Delete">
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                                @onclick="() => RemoveSongRequest(context)">Remove
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
        @if (musicPlaylists != null)
        {
            <MudItem xs="4">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h6">Playlists</MudText>
                    <MudTable Items="@musicPlaylists">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.Name</MudTd>
                            <MudTd DataLabel="Load">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                @onclick="() => StartPlaylist(context)">
                                    Load</MudButton>
                            </MudTd>
                            <MudTd DataLabel="View">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                @onclick="() => ViewList(context)">
                                    View</MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
        @if (currentPlayList != null)
        {
            <MudItem xs="8">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h6">Curent Playlist: @currentPlayList.Name - Total Songs
                        @currentPlayList.Songs.Count</MudText>
                    <MudTable Items="@currentPlayList.Songs">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Length</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.Title</MudTd>
                            <MudTd DataLabel="Duration">@context.Duration</MudTd>
                            <MudTd DataLabel="Edit">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                @onclick="() => RemoveSong(context)">
                                    Remove</MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private List<MusicPlaylist>? musicPlaylists;
    private MusicPlaylist? currentPlayList;
    private Song? currentSong;
    private List<Song>? songRequests;
    private HubConnection? hubConnection;
    [Inject] private IDialogService DialogService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        musicPlaylists = await YtPlayer.Playlists();
        currentPlayList = await YtPlayer.CurrentPlaylist();
        currentSong = YtPlayer.GetCurrentSong();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;
        hubConnection = new HubConnectionBuilder().WithAutomaticReconnect()
        .WithUrl(Navigation.ToAbsoluteUri("/ythub")).Build();

        hubConnection.On<Song?>("CurrentSongUpdate", (song) =>
        {
            currentSong = song;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<MusicPlaylist>("UpdateCurrentPlaylist", (playlist) =>
        {
            currentPlayList = playlist;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<Song>>("CurrentSongRequests", (playlist) =>
        {
            songRequests = playlist;
            InvokeAsync(StateHasChanged);
        });
        try
        {
            await hubConnection.StartAsync();
        }
        catch (TaskCanceledException)
        {
            Snackbar.Add("Lost connection to bot. Please refresh or navigate to another page. If error persist check your browser version and for any OS updates.", Severity.Error);
            logger.LogWarning("User lost connection to bot.");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error connecting to bot. Please refresh. If error persist check your browser version and for any OS updates.", Severity.Error);
            logger.LogWarning(ex, "Failed to connect to hub");
        }
    }

    private void ViewList(MusicPlaylist musicPlaylist)
    {
        navigationManager.NavigateTo($"/viewplaylist/{musicPlaylist.Id}");
    }

    private async Task StartPlaylist(MusicPlaylist musicPlaylist)
    {
        if (musicPlaylist != null && musicPlaylist.Id != null)
        {
            await YtPlayer.LoadPlayList((int)musicPlaylist.Id);
            StateHasChanged();
        }
    }
    private async Task Priority(Song song)
    {
        await YtPlayer.MoveSongToNext(song.SongId);
    }

    private async Task RemoveSong(Song song)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        if (result != null)
        {
            await YtPlayer.RemoveSong(song);
        }
    }

    private async Task RemoveSongRequest(Song song)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        if (result != null)
        {
            await YtPlayer.RemoveSongRequest(song);
        }
    }


    private async Task StealSong()
    {
        await YtPlayer.StealCurrentSong();
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}