@page "/autoshoutouts"
@attribute [Authorize(Roles = "Streamer")]
@inject DotNetTwitchBot.Bot.Commands.Misc.ShoutoutSystem ShoutoutSystem
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
<PageTitle>Auto Shoutouts</PageTitle>
<MudContainer MaxWidth="MaxWidth.False">
    @if (autoShoutouts == null)
    {
        <MudAlert Severity="Severity.Info">Loading...</MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="8">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudTable Items="@autoShoutouts">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Response</MudTh>
                            <MudTh>Last Shoutout</MudTh>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.Name</MudTd>
                            <MudTd DataLabel="Response">@context.CustomMessage</MudTd>
                            <MudTd DataLabel="Last Shoutout">@context.LastShoutout</MudTd>
                            <MudTd DataLabel="Edit">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => Edit(context.Id)">
                                    Edit
                                </MudButton>
                            </MudTd>
                            <MudTd DataLabel="Delete">
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                                @onclick="() => Delete(context)">
                                    Delete
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
            @if (autoShoutout != null)
            {
                <MudItem xs="4">
                    <MudCard>
                        <MudPaper Elevation="2" Class="pa-4">
                            <EditForm Model="@autoShoutout" OnValidSubmit="OnSubmit">
                                <MudCardContent>
                                    <MudTextField Label="Name" Required="true" RequiredError="Name is required"
                                    @bind-Value="autoShoutout.Name" />
                                    <MudTextField Label="Message" Required="false" @bind-Value="autoShoutout.CustomMessage" />
                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                        Class="ml-auto">
                                        Submit
                                    </MudButton>
                                </MudCardContent>
                            </EditForm>
                        </MudPaper>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>
@code {
    private List<DotNetTwitchBot.Bot.Models.AutoShoutout>? autoShoutouts;
    private DotNetTwitchBot.Bot.Models.AutoShoutout? autoShoutout { get; set; } = new();
    [Inject] private IDialogService DialogService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        autoShoutouts = await ShoutoutSystem.GetAutoShoutoutsAsync();
    }

    private async Task ReloadShoutouts()
    {
        autoShoutouts = await ShoutoutSystem.GetAutoShoutoutsAsync();
        StateHasChanged();
    }

    private void AddShoutout()
    {
        navigationManager.NavigateTo($"/autoshoutouts/create");
    }

    public async void OnSubmit()
    {
        if (autoShoutout == null) return;
        await ShoutoutSystem.UpdateAutoShoutoutAsync(autoShoutout);
        autoShoutout = new();
        await ReloadShoutouts();
    }
    private async Task Delete(AutoShoutout autoShoutout)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        if (result != null)
        {
            await ShoutoutSystem.DeleteAutoShoutout(autoShoutout);
            await ReloadShoutouts();
        }
    }

    private void Edit(int? id)
    {
        navigationManager.NavigateTo($"/autoshoutouts/{id}");
    }
}