@page "/editviewer/{id}"
@attribute [Authorize(Roles = "Streamer, Moderator")]
@using DotNetTwitchBot.Bot;

@using System.ComponentModel.DataAnnotations
@using DotNetTwitchBot.Bot.Models.Points
@inject DotNetTwitchBot.Bot.Commands.Features.IViewerFeature viewerFeature
@inject DotNetTwitchBot.Bot.Commands.Features.ILoyaltyFeature loyaltyFeature
@inject DotNetTwitchBot.Bot.Core.Points.IPointsSystem pointSystem
@inject DotNetTwitchBot.Bot.Admin.IIpLogFeature ipLogFeature
@inject DotNetTwitchBot.Bot.Core.SubscriptionTracker subTracker
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject DotNetTwitchBot.Bot.Core.IChatHistory chatHistory

<PageTitle>SPTV Twitch Bot - Edit Viewer</PageTitle>
@if (viewer.Viewer == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudContainer MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-4">
                    <EditForm Model="@viewer" OnValidSubmit="OnSubmit">
                        <DataAnnotationsValidator />
                        <MudCardContent>
                            <MudTextField @bind-Value="viewer.Viewer.Username" Label="Username" ReadOnly="true" Variant="Variant.Text" />
                            <MudTextField @bind-Value="viewer.Viewer.DisplayName" Label="Display Name" ReadOnly="true"
                            Variant="Variant.Text" />
                            <MudTextField Label="Title" Required="false" @bind-Value="viewer.Viewer.Title" />
                            <MudTextField @bind-Value="viewer.Viewer.LastSeen" Label="Last Seen" ReadOnly="true" Variant="Variant.Text" />
                            <MudCheckBox ReadOnly="true" @bind-Value="viewer.Viewer.isSub" Label="Subscriber?" />
                            <MudCheckBox ReadOnly="true" @bind-Value="viewer.Viewer.isVip" Label="VIP?" />
                            <MudCheckBox ReadOnly="true" @bind-Value="viewer.Viewer.isMod" Label="Moderator?" />
                            <MudCheckBox ReadOnly="true" @bind-Value="viewer.Viewer.isBroadcaster" Label="Broadcaster?" />
                            <MudTextField @bind-Value="viewer.FollowDated" Label="Follow Date" ReadOnly="true" Variant="Variant.Text" />
                            <MudTextField @bind-Value="viewer.DateCreated" Label="Account Created" ReadOnly="true" Variant="Variant.Text" />
                            <MudTextField @bind-Value="viewer.LastSub" Label="Last Sub" ReadOnly="true" Variant="Variant.Text" />
                            <MudText>Messages Rank: #@viewer.Messages?.Ranking Total: @viewer.Messages?.MessageCount</MudText>
                            <MudText>Pasties Rank: #@viewer.Pasties?.Ranking Total: @viewer.Pasties?.Points</MudText>
                            <MudText>Tickets Rank: #@viewer.Tickets?.Ranking Total: @viewer.Tickets?.Points</MudText>
                            <MudText>Watch Time Rank: #@viewer.Time?.Ranking Total: @viewer.WatchedTime</MudText>

                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                                Submit
                            </MudButton>
                        </MudCardContent>
                    </EditForm>
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudTable ServerData="MessagesReload" 
                Dense="true" Hover="true" @ref="messagesTable">
                    <ToolBarContent>
                        <MudText Class="pa-4" Typo="Typo.h6">Chat History</MudText>
                        <MudCheckBox Label="Include Commands?" Value="includeCommands" @onclick="CommandsViewChange" />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Date</MudTh>
                        <MudTh>Message</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Rank">@context.CreatedAt</MudTd>
                        <MudTd DataLabel="Name">@context.Message</MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>No matching records found</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudItem>
            <MudItem xs="6">
                <MudTable Items="@IpLogs"
                Dense="true" Hover="true">
                    <ToolBarContent>
                        <MudText Class="pa-4" Typo="Typo.h6">Ip History</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Ip</MudTh>
                        <MudTh>Count</MudTh>
                        <MudTh>Last Used</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Ip">@context.Ip</MudTd>
                        <MudTd DataLabel="Count">@context.Count</MudTd>
                        <MudTd DataLabel="Last Used"><ToLocal DateTime="@context.ConnectedDate" Format="dddd, mmmm d h:MM:ss TT"></ToLocal></MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>No matching records found</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudItem>
            <MudItem xs="6">
                <MudTable Items="@OtherIpLogs"
                Dense="true" Hover="true">
                    <ToolBarContent>
                        <MudText Class="pa-4" Typo="Typo.h6">Ip Match History</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Ip</MudTh>
                        <MudTh>Count</MudTh>
                        <MudTh>Last Used</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">
                            <MudLink Href=@LinkBuilder("/editviewer/", context.Username)>
                                @context.Username
                            </MudLink>
                        </MudTd>
                        <MudTd DataLabel="Ip">@context.Ip</MudTd>
                        <MudTd DataLabel="Count">@context.Count</MudTd>
                        <MudTd DataLabel="Last Used"><ToLocal DateTime="context.ConnectedDate" Format="dddd, mmmm d h:MM:ss TT"></ToLocal></MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>No matching records found</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    [Parameter]
    public string? id { get; set; }

    private MudTable<ViewerChatHistory>? messagesTable;

    private List<Bot.Models.IpLogs.IpLogEntry> IpLogs = new();
    private List<Bot.Models.IpLogs.IpLogEntry> OtherIpLogs = new();
    private ViewViewer viewer { get; set; } = new();
    private string username { get; set; } = "";
    private bool includeCommands { get; set; } = false;

    private EventCallback<bool> CommandsViewChanged { get; set; }
    public class ViewViewer
    {
        public DotNetTwitchBot.Bot.Models.Viewer? Viewer { get; set; }
        public DateTime FollowDated { get; set; }
        public DateTime? LastSub { get; set; }
        public DateTime? DateCreated { get; set; }
        public ViewerMessageCountWithRank? Messages { get; set; }
        public UserPointsWithRank? Pasties { get; set; }
        public UserPointsWithRank? Tickets { get; set; }
        public ViewerTimeWithRank? Time { get; set; }
        public string WatchedTime { get; set; } = "";

    }

    protected override async void OnParametersSet()
    {
        if(int.TryParse(id, out var realId)){
            viewer.Viewer = await viewerFeature.GetViewerById(realId);
        } 
        else if (!string.IsNullOrEmpty(id))
        {
            viewer.Viewer = await viewerFeature.GetViewerByUserName(id);
        }

        if(viewer.Viewer != null)
        {
            username = viewer.Viewer.Username;
            var follower = await viewerFeature.GetFollowerAsync(viewer.Viewer.Username);
            if(follower != null)
            {
                viewer.FollowDated = follower.FollowDate;
            }
            var giveawayPointsSystem = await pointSystem.GetPointTypeForGame("giveawayfeature");
            viewer.Tickets = await pointSystem.GetPointsWithRankByUserId(viewer.Viewer.UserId, giveawayPointsSystem.Id.GetValueOrDefault());
            viewer.Pasties = await pointSystem.GetPointsWithRankByUserId(viewer.Viewer.UserId, 1);
            viewer.Messages = await loyaltyFeature.GetUserMessagesAndRank(viewer.Viewer.Username);
            viewer.Time = await loyaltyFeature.GetUserTimeAndRank(viewer.Viewer.Username);
            viewer.DateCreated = await viewerFeature.GetUserCreatedAsync(viewer.Viewer.Username);
            if(viewer.Time != null)
            {
                viewer.WatchedTime = Tools.ConvertToCompoundDuration((long)viewer.Time.Time);
            }
            viewer.LastSub = await subTracker.LastSub(viewer.Viewer.Username);
            IpLogs = await ipLogFeature.GetIpLogsForUser(viewer.Viewer.Username);
            OtherIpLogs = await ipLogFeature.GetDuplicateIpsForUser(viewer.Viewer.Username);
        }

        StateHasChanged();
    }


    private async Task CommandsViewChange()
    {
        includeCommands = !includeCommands;
        if (messagesTable != null)
        {
            await messagesTable.ReloadServerData();
        }
        StateHasChanged();
    }

    public async void OnSubmit()
    {
        if (viewer.Viewer == null) return;
        await viewerFeature.SaveViewer(viewer.Viewer);
        navigationManager.NavigateTo($"/viewers");
    }

    private async Task<TableData<ViewerChatHistory>> MessagesReload(TableState state, CancellationToken _)
    {
        var pageFilter = new Models.PaginationFilter();
        pageFilter.Page = state.Page;
        pageFilter.Count = state.PageSize;
        pageFilter.Filter = username;
        var response = await chatHistory.GetViewerChatMessages(pageFilter, includeCommands);
        return new TableData<ViewerChatHistory>() { TotalItems = response.TotalItems, Items = response.Data };
    }

    public class CommandsConverter : BoolConverter<bool>
    {
        
    }

    private string LinkBuilder(string _route, string _parameter)
    {
        return _route + _parameter;
    }
}