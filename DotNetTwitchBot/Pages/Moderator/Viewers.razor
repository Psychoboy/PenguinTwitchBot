@page "/viewers"
@using DotNetTwitchBot.Bot.Models.IpLogs
@attribute [Authorize(Roles = "Streamer, Moderator")]
@inject DotNetTwitchBot.Bot.Commands.Features.IViewerFeature viewerFeature
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject DotNetTwitchBot.Bot.Admin.IIpLogFeature ipLogFeature

<PageTitle>SPTV Twitch Bot - Viewers</PageTitle>
<MudContainer MaxWidth="MaxWidth.False">
<MudGrid>
    <MudItem xs="6">
        <MudPaper Elevation="2" Class="pa-4">
            <EditForm Model="@model" OnValidSubmit="Search">
                <DataAnnotationsValidator />
                <MudTextField Label="Name" @bind-Value="model.Username" For="@(() => model.Username)" />
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                    Class="ml-auto">
                    Search
                </MudButton>
            </EditForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Elevation="2" Class="pa-4">
            <MudTable Items="@viewers">
                <HeaderContent>
                    <MudTh>Username</MudTh>
                    <MudTh>Display Name</MudTh>
                    <MudTh>Title</MudTh>
                    <MudTh>Last Seen</MudTh>
                        <MudTh>Sub?</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Username">@context.Username</MudTd>
                    <MudTd DataLabel="Display Name">@context.DisplayName</MudTd>
                    <MudTd DataLabel="Title">@context.Title</MudTd>
                    <MudTd DataLabel="Last Seen">@context.LastSeen</MudTd>
                        <MudTd DataLabel="Sub">@context.isSub</MudTd>
                    <MudTd DataLabel="Edit/View Details">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => Edit(context)">View/Edit
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudItem>
        <MudItem xs="12">
            <MudTable ServerData="LogsReload" @ref=logsTable
                      Dense="true" Hover="true">
                <ToolBarContent>
                    <MudText Class="pa-4" Typo="Typo.h6">Users Matching Ip</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Ip</MudTh>
                    <MudTh>Count</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">
                        <MudLink Href=@LinkBuilder("/editviewer/", context.User1)>
                            @context.User1
                        </MudLink>
                    </MudTd>
                    <MudTd DataLabel="Name">
                        <MudLink Href=@LinkBuilder("/editviewer/", context.User2)>
                            @context.User2
                        </MudLink>
                    </MudTd>
                    <MudTd DataLabel="Ip">@context.Ip</MudTd>
                    <MudTd DataLabel="Count">@context.Count</MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
</MudGrid>
</MudContainer>
@code {
    private List<Viewer>? viewers = new();
    private SearchForm model = new();
    private MudTable<IpLogUsersWithSameIp>? logsTable;

    public class SearchForm
    {
        [Required]
        [StringLength(25, ErrorMessage = "Search must be between 3 and 25 characters", MinimumLength = 3)]
        public string Username { get; set; } = "";
    }

    private async Task<TableData<IpLogUsersWithSameIp>> LogsReload(TableState state, CancellationToken _token)
    {
        var response = await ipLogFeature.GetAllDuplicateIps(state.Page, state.PageSize);
        return new TableData<IpLogUsersWithSameIp> { TotalItems = response.Count, Items = response };
    }

    private void Edit(DotNetTwitchBot.Bot.Models.Viewer item)
    {
        navigationManager.NavigateTo($"/editviewer/{item.Id}");
    }
    private async Task Search()
    {
        viewers = await viewerFeature.SearchForViewer(model.Username);
        StateHasChanged();
    }

    private string LinkBuilder(string _route, string _parameter)
    {
        return _route + _parameter;
    }
}