@page "/raidhistory"
@attribute [Authorize(Roles = "Streamer")]
@inject DotNetTwitchBot.Bot.Commands.Misc.RaidTracker RaidTracker

<PageTitle>SPTV Twitch Bot - Raid History</PageTitle>

@if (raidHistory != null)
{
    <MudTable Items="@(GetFilteredContent())">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh><MudCheckBox @bind-Value="OnlineOnly">Online?</MudCheckBox></MudTh>
            <MudTh>Game</MudTh>
            <MudTh>Incoming Raids</MudTh>
            <MudTh>Avg. Per</MudTh>
            <MudTh>Last Incoming</MudTh>
            <MudTh>Outgoing</MudTh>
            <MudTh>Avg. Per</MudTh>
            <MudTh>Last Outgoing</MudTh>
            <MudTh>Raid</MudTh>
            <MudTh>Remove</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.DisplayName</MudTd>
            <MudTd DataLabel="Is Online">@context.IsOnline</MudTd>
            <MudTd DataLabel="Game">@context.LastGame</MudTd>
            <MudTd DataLabel="Incoming">@context.TotalIncomingRaids</MudTd>
            <MudTd DataLabel="Avg. Incoming"> @(context.TotalIncomingRaids > 0 ? context.TotalIncomingRaidViewers /
            context.TotalIncomingRaids : 0) </MudTd>
            <MudTd DataLabel="Last Incoming">@context.LastIncomingRaid.ToShortDateString()</MudTd>
            <MudTd DataLabel="Outgoing">@context.TotalOutgoingRaids</MudTd>
            <MudTd DataLabel="Avg. Per"> @(context.TotalOutgoingRaids > 0 ? context.TotalOutGoingRaidViewers /
            context.TotalOutgoingRaids : 0)</MudTd>
            <MudTd DataLabel="Last Outgoing">@context.LastOutgoingRaid.ToShortDateString()</MudTd>
                <MudTd DataLabel="Edit">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => Raid(context)">Raid</MudButton>
                
                </MudTd>
                <MudTd DataLabel="Remove">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="() => Remove(context)">Remove</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
}

@code {
    private List<RaidHistoryEntry>? raidHistory;
    private bool OnlineOnly { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        raidHistory = await RaidTracker.GetHistory();
    }

    private List<RaidHistoryEntry>? GetFilteredContent()
    {
        if(OnlineOnly)
        {
            return raidHistory?.Where(x => x.IsOnline).ToList();
        }
        return raidHistory;
    }

    private async Task Raid(RaidHistoryEntry item)
    {
        try
        {
            await RaidTracker.Raid(item.Name);
        }
        catch (Exception)
        { }
    }
    private async Task Remove(RaidHistoryEntry item)
    {
        try
        {
            await RaidTracker.RemoveRaidHistory(item);
            raidHistory = await RaidTracker.GetHistory();
            StateHasChanged();
        }
        catch (Exception)
        { }
    }
}