@page "/viewergiveaway"

@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using DotNetTwitchBot.Bot.Models.Giveaway
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DotNetTwitchBot.Bot.Commands.Features.GiveawayFeature GiveawayFeature;
@inject DotNetTwitchBot.Bot.Commands.Features.ITicketsFeature TicketFeature;
@inject NavigationManager Navigation
@inject Blazor.Analytics.IAnalytics Analytics

<PageTitle>SPTV Twitch Bot - Viewer Giveaway</PageTitle>

<MudContainer Class="pa-6" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem sm="4">
            @*<MudPaper Class="d-flex align-content-start flex-wrap flex-grow-1 gap-4 pa-8 ma-2">*@
            <MudPaper Class="pa-8 ma-2" Outlined="true">
                <MudText Typo="Typo.h5">Prize</MudText>
                <MudText Typo="Typo.h6">@prize</MudText>
                <MudImage Fluid="true" Class="rounded-lg" Src="@imageUrl" />
                </MudPaper>

               

            @*</MudPaper>*@
        </MudItem>
        <MudItem sm="4">
            <MudPaper Class="pa-4 ma-1" Outlined="false" Elevation="0">
                <MudText Typo="Typo.h5">Total Entrants</MudText>
                <MudDivider />
                <MudText Align="Align.Center" Typo="Typo.h6">@entrants</MudText>
            </MudPaper>

            <MudPaper Class="pa-4 ma-1" Outlined="false" Elevation="0">
                <MudText Typo="Typo.h5">Total Entries</MudText>
                <MudDivider />
                <MudText Align="Align.Center" Typo="Typo.h6">@entries</MudText>
            </MudPaper>
        </MudItem>
        <AuthorizeView>
            <Authorized Context="Auth">
                <MudItem sm="4">
                    <MudPaper Class="pa-4 ma-1" Outlined="false" Elevation="0">
                        <MudText Typo="Typo.h5">Your Tickets</MudText>
                        <MudDivider />
                        <MudText Align="Align.Center" Typo="Typo.h4">@userTickets</MudText>
                    </MudPaper>
                    <MudPaper Class="pa-4 ma-1" Outlined="false" Elevation="0">
                        <MudText Typo="Typo.h5">Your Entries</MudText>
                        <MudDivider />
                        <MudText Align="Align.Center" Typo="Typo.h4">@userEntries</MudText>
                    </MudPaper>
                    <MudPaper Class=" pa-4 ma-1 flex-wrap-reverse" Outlined="false" Elevation="0">
                        <MudText Typo="Typo.h5">Enter Tickets</MudText>
                        <EditForm Model="@model" OnValidSubmit="EnterTickets">
                            <DataAnnotationsValidator />
                            <MudNumericField  @bind-Value="model.EnterAmount" For="@(() => model.EnterAmount)" />
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                       Class="ml-auto" Disabled=@isSubmitting>
                                Enter
                            </MudButton>
                            @if(!string.IsNullOrWhiteSpace(AlertText))
                            {
                                <MudAlert Severity="@AlertSeverity">@AlertText</MudAlert>
                            }
                        </EditForm>
                    </MudPaper>
                    <MudPaper Class="pa-4 ma-1" Outlined="false" Elevation="0">
                        <MudText Typo="Typo.h5">How to earn tickets</MudText>
                        <MudDivider />
                        <MudText>50 tickets for every sub</MudText>
                        <MudText>50 tickets for every gifted sub</MudText>
                        <MudText>10 tickets per 100 bits</MudText>
                        <MudDivider />
                        <MudText>Every 5 minutes tickets are given out accordingly:</MudText>
                        <MudText>+1 Ticket for everyone</MudText>
                        <MudText>+2 Tickets for Subscribers</MudText>
                        <MudText>+5 Tickets for Active Viewers</MudText>
                        <MudText>+5 Tickets for Active Subscribers</MudText>
                        <MudText>so every 5 minutes an active subscriber gets 13 tickets.</MudText>
                        <MudText>An Active viewer is someone who has participated in chat in the last 15 minutes. This includes chat, commands, follows, subs, bits, and channel point redemptions. Subscribers watching are always considered active</MudText>
                    </MudPaper>
                </MudItem>
            </Authorized>
            <NotAuthorized>
                <MudItem sm="4">
                    <MudPaper Class="pa-4 ma-1" Outlined="false" Elevation="0">
                        <MudText Typo="Typo.h5"><MudLink Href="/signin" Match="NavLinkMatch.Prefix" Typo="Typo.h5">Sign In</MudLink>  with Twitch to see your tickets and/or enter giveaway here.</MudText>

                    </MudPaper>
                    <MudPaper Class="pa-4 ma-1" Outlined="false" Elevation="0">
                        <MudText Typo="Typo.h5">How to earn tickets</MudText>
                        <MudDivider />
                        <MudText>50 tickets for every sub</MudText>
                        <MudText>50 tickets for every gifted sub</MudText>
                        <MudText>10 tickets per 100 bits</MudText>
                        <MudDivider />
                        <MudText>Every 5 minutes tickets are given out accordingly:</MudText>
                        <MudText>+1 Ticket for everyone</MudText>
                        <MudText>+2 Tickets for Subscribers</MudText>
                        <MudText>+5 Tickets for Active Viewers</MudText>
                        <MudText>+5 Tickets for Active Subscribers</MudText>
                        <MudText>so every 5 minutes an active subscriber gets 13 tickets.</MudText>
                        <MudText>An Active viewer is someone who has participated in chat in the last 15 minutes. This includes chat, commands, follows, subs, bits, and channel point redemptions. Subscribers watching are always considered active</MudText>
                    </MudPaper>
                </MudItem>
            </NotAuthorized>
        </AuthorizeView>
        <MudItem>
            <MudPaper Class="pa-4 ma-1" Outlined="false" Elevation="0">
                <MudText Typo="Typo.h5">Rules</MudText>
                <MudText>Winners for primary giveaway do NOT have to be present. Primary winner can only win once every 3 months! If primary winner has won in last 3 months a re-draw will be done. Primary winner is decided by first prize of the night unless 2nd prize value is over $100 which then both and any others would be considered primary.</MudText>
            </MudPaper>
            <MudPaper Class="pa-4 ma-1" Outlined="false" Elevation="0">
                <MudText Typo="Typo.h5">Terms</MudText>
                <MudText>Winner(s) will be whispered via Twitch and only Twitch. Winner(s) must respond within 48 hours. Once the prize is sent the winner has 1 week to collect otherwise will be cancelled.</MudText>
                <MudText>Right to change giveaway at any time. Giveaways illegal where it is not legal. Must be 18+ to participate.</MudText>
                <MudText>Giveaways can change at any time without reason.</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
    
</MudContainer>

@code {
    private HubConnection? hubConnection;
    private List<GiveawayWinner> winners = new List<GiveawayWinner>();
    private string prize = "";
    private string? imageUrl;
    private int entries;
    private int entrants;
    private long userTickets;
    private long userEntries;
    private string Username = "";
    private string AlertText = "";
    private MudBlazor.Severity AlertSeverity = Severity.Info;
    private bool isSubmitting;

    private EnterTicketsForm model = new();

    public class EnterTicketsForm
    {
        [Range(1, 1000000)]
        public int EnterAmount { get; set; } = 1;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated && user.Identity.Name != null)
        {
            Username = user.Identity.Name;
            userTickets = await TicketFeature.GetViewerTickets(Username);
            userEntries = await GiveawayFeature.GetEntriesCount(Username);
        }
        prize = await GiveawayFeature.GetPrize();
        imageUrl = await GiveawayFeature.GetImageUrl();
        entries = await GiveawayFeature.GetEntriesCount();
        entrants = await GiveawayFeature.GetEntrantsCount();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/giveawayhub")).Build();
        hubConnection.On<List<GiveawayWinner>>("Winners", (Winners) =>
        {
            winners = Winners;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("Prize", (Prize) =>
        {
            prize = Prize;
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
    }

    private async Task EnterTickets()
    {
        if (isSubmitting)
            return;

        isSubmitting = true;
        try
        {
            var result = await GiveawayFeature.Enter(Username, model.EnterAmount.ToString(), true);
            AlertText = result;
            AlertSeverity = Severity.Success;
            await Analytics.TrackEvent("EnteredTickets", new { Username = Username, Amount = model.EnterAmount });
            userTickets = await TicketFeature.GetViewerTickets(Username);
            userEntries = await GiveawayFeature.GetEntriesCount(Username);
        } catch (SkipCooldownException ex)
        {
            AlertText = ex.Message;
            AlertSeverity = Severity.Error;
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
