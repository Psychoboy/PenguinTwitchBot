@page "/viewergiveaway"

@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using DotNetTwitchBot.Bot.Models.Giveaway
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DotNetTwitchBot.Bot.Commands.Features.GiveawayFeature GiveawayFeature;
@inject DotNetTwitchBot.Bot.Commands.Features.ITicketsFeature TicketFeature;
@inject DotNetTwitchBot.Bot.Commands.Features.ILoyaltyFeature LoyaltyFeature;
@inject NavigationManager Navigation

<PageTitle>SPTV Twitch Bot - Viewer Giveaway</PageTitle>

<style> 
    .mud-contrast-text {
        color: var(--mud-palette-white);
    }
</style>


<MudContainer Class="pa-6" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem sm="6">
            <MudPaper Class="pa-4" Elevation="0">
                 <center>
                    <MudText Typo="Typo.h5" class="mud-contrast-text">Giveaway</MudText>
                    <MudDivider class="mb-2" />
                    <MudText Typo="Typo.h5">@prize</MudText>
                    <MudImage Fluid="true" Class="rounded mt-4 px-2" Src="@imageUrl" />
                </center>
            </MudPaper>
        </MudItem>
        <MudItem sm="6">
            <MudPaper Class="pa-4" Outlined="false" Elevation="0">
                <MudText Typo="Typo.h5" class="mud-contrast-text">Total Entrants</MudText>
                <MudDivider />
                <MudText Typo="Typo.h4">@entrants</MudText>
            </MudPaper>

            <MudPaper Class="pa-4" Outlined="false" Elevation="0">
                <MudText Typo="Typo.h5" class="mud-contrast-text">Total Entries</MudText>
                <MudDivider />
                <MudText Typo="Typo.h4">@entries</MudText>
            </MudPaper>
            <AuthorizeView>
                <Authorized Context="Auth">
                    <MudPaper Class="pa-4" Outlined="false" Elevation="0">
                        <MudText Typo="Typo.h5" class="mud-contrast-text">Your Tickets</MudText>
                        <MudDivider />
                        <MudText Typo="Typo.h4">@userTickets</MudText>
                    </MudPaper>
                    <MudPaper Class="pa-4" Outlined="false" Elevation="0">
                        <MudText Typo="Typo.h5" class="mud-contrast-text">Your Entries</MudText>
                        <MudDivider />
                        <MudText Typo="Typo.h4">@userEntries</MudText>
                    </MudPaper>
                    <MudPaper Class=" pa-4 flex-wrap-reverse" Outlined="false" Elevation="0">
                        <MudText Typo="Typo.h5" class="mud-contrast-text">Enter Tickets</MudText>
                        <MudDivider />
                        <EditForm Model="@model" OnValidSubmit="EnterTickets">
                            <DataAnnotationsValidator />
                            <MudNumericField @bind-Value="model.EnterAmount" For="@(() => model.EnterAmount)" />
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                       Class="ml-auto" Disabled=@isSubmitting>
                                Enter
                            </MudButton>
                            @if (!string.IsNullOrWhiteSpace(AlertText))
                            {
                                <MudAlert Severity="@AlertSeverity">@AlertText</MudAlert>
                            }
                        </EditForm>
                        <MudText><MudLink Href="https://twitch.tv/subs/SuperPenguinTV" Target="_blank">Subscribe today to earn even more tickets</MudLink></MudText>
                        <MudText><MudLink Href="/viewergiveaway#howtoearn">How to earn tickets</MudLink></MudText>
                    </MudPaper>
                </Authorized>
                <NotAuthorized>
                    <MudPaper Class="pa-4" Outlined="false" Elevation="0">
                        <MudText><MudLink Href="/signin" Match="NavLinkMatch.Prefix">Sign In</MudLink>  with Twitch to see your tickets and/or enter giveaway here.</MudText>
                        <MudText><MudLink Href="https://twitch.tv/subs/SuperPenguinTV" Target="_blank">Subscribe today to earn even more tickets</MudLink></MudText>
                        <MudText><MudLink Href="/viewergiveaway#howtoearn">How to earn tickets</MudLink></MudText>
                    </MudPaper>
                </NotAuthorized>
            </AuthorizeView>

        </MudItem>
        <MudItem>
            <Bookmark BookmarkName="howtoearn">
            <MudPaper Class="pa-4 mb-1" Outlined="false" Elevation="0" id="howtoearn">
                <MudText Typo="Typo.h5" class="mud-contrast-text">How to earn tickets</MudText>
                <MudDivider class="mb-2" />
                <MudText>@TicketsPerSub tickets for every sub</MudText>
                <MudText>@TicketsPerSub tickets for every gifted sub</MudText>
                <MudText>@BitsPerTicket tickets per 100 bits</MudText>
                <MudDivider class="my-2" />
                <MudText>Every 5 minutes tickets are given out to those in chat accordingly:</MudText>
                <MudText>+1 Ticket for everyone</MudText>
                <MudText>+5 Tickets for Active Viewers</MudText>
                <MudText>+6 Tickets for Subscribers</MudText>
                <MudText>so every 5 minutes a subscriber gets 12 tickets while in chat. <MudLink Href="https://twitch.tv/subs/SuperPenguinTV" Target="_blank">Subscribe today</MudLink></MudText>
                <MudText>An Active viewer is someone who has participated in chat in the last 15 minutes. This includes chat, commands, follows, subs, bits, and channel point redemptions. Subscribers watching are always considered active</MudText>
            </MudPaper>
            </Bookmark>
            <MudPaper Class="pa-4 mb-1" Outlined="false" Elevation="0">
                <MudText Typo="Typo.h5" class="mud-contrast-text">Rules</MudText>
                <MudText>Winners for giveaway do NOT have to be present.</MudText>
                <MudText>All prizes have a minimum of 1 month or next giveaway cooldown whatever is longer.Cooldown means ineligible to win standard giveaways during that time. Still eligible for any "special" giveaways. All values are based on current value.</MudText>
                <MudText>Tier 1 - Less then $75 value - 1 Month or next giveaway cooldown whichever is longer</MudText>
                <MudText>Tier 2 - $75 to $115 - 2 Months or next 2 giveaways cooldown whichever is longer</MudText>
                <MudText>Tier 3 - Greater than $115 - 3 Months or next 3 giveaways cooldown whichever is longer</MudText>
            </MudPaper>
            <MudPaper Class="pa-4 mb-1" Outlined="false" Elevation="0">
                <MudText Typo="Typo.h5" class="mud-contrast-text">Terms</MudText>
                <MudText>Winner(s) will be whispered via Twitch and only Twitch. Winner(s) must respond within 48 hours. Once the prize is sent the winner has 1 week to collect otherwise will be cancelled.</MudText>
                <MudText>Right to change giveaway at any time. Giveaways illegal where it is not legal. Must be 18+ to participate.</MudText>
                <MudText>Giveaways can change at any time without reason.</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
    
</MudContainer>

@code {
    private HubConnection? hubConnection;
    private List<GiveawayWinner> winners = new List<GiveawayWinner>();
    private string prize = "";
    private string? imageUrl;
    private int entries;
    private int entrants;
    private long userTickets;
    private long userEntries;
    private string Username = "";
    private string AlertText = "";
    private MudBlazor.Severity AlertSeverity = Severity.Info;
    private bool isSubmitting;
    private int TicketsPerSub;
    private int BitsPerTicket;

    private EnterTicketsForm model = new();

    public class EnterTicketsForm
    {
        [Range(1, 1000000)]
        public int EnterAmount { get; set; } = 1;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated && user.Identity.Name != null)
        {
            Username = user.Identity.Name;
            userTickets = await TicketFeature.GetViewerTickets(Username);
            userEntries = await GiveawayFeature.GetEntriesCount(Username);
        }
        prize = await GiveawayFeature.GetPrize();
        imageUrl = await GiveawayFeature.GetImageUrl();
        entries = await GiveawayFeature.GetEntriesCount();
        entrants = await GiveawayFeature.GetEntrantsCount();
        TicketsPerSub = await LoyaltyFeature.GetTicketsPerSub();
        BitsPerTicket = await LoyaltyFeature.GetBitsPerTicket();
        if (BitsPerTicket > 0) BitsPerTicket = 100 / BitsPerTicket;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/mainhub")).Build();
        hubConnection.On<List<GiveawayWinner>>("Winners", (Winners) =>
        {
            winners = Winners;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("Prize", (Prize) =>
        {
            prize = Prize;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<int, int>("UpdateTickets", (curEntries, curEntrants) =>
        {
            entries = curEntries;
            entrants = curEntrants;
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
    }

    private async Task EnterTickets()
    {
        if (isSubmitting)
            return;

        isSubmitting = true;
        try
        {
            var result = await GiveawayFeature.Enter(Username, model.EnterAmount.ToString(), true);
            AlertText = result;
            AlertSeverity = Severity.Success;
            userTickets = await TicketFeature.GetViewerTickets(Username);
            userEntries = await GiveawayFeature.GetEntriesCount(Username);
        } catch (SkipCooldownException ex)
        {
            AlertText = ex.Message;
            AlertSeverity = Severity.Error;
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
