@page "/songrequests"
@using DotNetTwitchBot.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject DotNetTwitchBot.Bot.Commands.Music.YtPlayer YtPlayer
@implements IAsyncDisposable
@inject ISnackbar Snackbar
@inject ILogger<SongRequests> logger

<PageTitle>SPTV Twitch Bot - Song Requests</PageTitle>
<MudContainer Class="pa-6" MaxWidth="MaxWidth.False">

    <MudGrid>
        @if (currentSong != null)
        {
            <MudItem sm="6" md="4">
                <MudPaper Elevation="2">
                    <MudText>Current Song: @currentSong.Title</MudText>
                    <MudText>Requested By: @currentSong.RequestedBy</MudText>
                    <MudText>Duration: @currentSong.Duration</MudText>
                </MudPaper>
            </MudItem>

        }
        
        <MudItem xs="8">
            <DotNetTwitchBot.Pages.ViewerViews.Components.SongRequests />
        </MudItem>

        <MudItem xs="8">
            <DotNetTwitchBot.Pages.ViewerViews.Components.TopRequestedSongs />
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    private Song? currentSong;
    private HubConnection? hubConnection;

    protected override void OnInitialized()
    {
        currentSong = YtPlayer.GetCurrentSong();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;
        hubConnection = new HubConnectionBuilder().WithAutomaticReconnect()
        .WithUrl(Navigation.ToAbsoluteUri("/ythub")).Build();

        hubConnection.On<Song?>("CurrentSongUpdate", (song) =>
        {
            currentSong = song;
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (TaskCanceledException)
        {
            Snackbar.Add("Lost connection to bot. Data may be inaccurate until refresh.", Severity.Warning);
            logger.LogWarning("User lost connection to bot.");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Lost connection to bot. Data may be inaccurate until refresh.", Severity.Warning);
            logger.LogWarning(ex, "Failed to connect to hub");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
