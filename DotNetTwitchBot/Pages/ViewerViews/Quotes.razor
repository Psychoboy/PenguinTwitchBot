@page "/quotes"
@inject DotNetTwitchBot.Bot.Commands.Misc.QuoteSystem QuoteSystem

<PageTitle>SPTV Twitch Bot - Quotes</PageTitle>

<MudContainer Class="pa-6" MaxWidth="MaxWidth.False">
    <MudPaper>
        <MudTable Items="@items" Filter="new Func<FilteredQuoteType,bool>(FilterFunc1)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Quotes</MudText>
                <MudSpacer />
                <MudTextField DebounceInterval="1000" @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Quote</MudTh>
                <MudTh>Game</MudTh>
                <MudTh>Created By</MudTh>
                <MudTh>Created On</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Quote">@context.Quote</MudTd>
                <MudTd DataLabel="Game">@context.Game</MudTd>
                <MudTd DataLabel="CreatedBy">@context.CreatedBy</MudTd>
                <MudTd DataLabel="CreatedOn">@context.CreatedOn.ToShortDateString()</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private IEnumerable<FilteredQuoteType> items = new List<FilteredQuoteType>();
    private string searchString1 = "";

    protected override async Task OnInitializedAsync()
    {
        items = await QuoteSystem.GetQuotes();
    }

    private bool FilterFunc1(FilteredQuoteType element) => FilterFunc(element, searchString1);

    private bool FilterFunc(FilteredQuoteType element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Quote.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CreatedBy.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Id}".Contains(searchString))
            return true;
        if (element.Game.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
