@page "/commands"
@using System.Security.Claims
@using DotNetTwitchBot.Bot.Commands;
@using DotNetTwitchBot.Bot.Commands.Custom;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICommandHandler CommandHandler
@inject CustomCommand CustomCommand
@inject DotNetTwitchBot.Bot.Commands.Custom.AudioCommands AudioCommands

<PageTitle>Commands</PageTitle>
<MudContainer MaxWidth="MaxWidth.False">
    <MudPaper>
        <MudTable Items="@commands" Striped="true" Filter="new Func<CommandModel,bool>(FilterFunc1)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Commands</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Command</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Rank</MudTh>
                <MudTh>Cost</MudTh>
                <MudTh>User Cooldown</MudTh>
                <MudTh>Global Cooldown</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Command">!@context.Command</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Rank">@context.Rank</MudTd>
                <MudTd DataLabel="Cost">@context.Cost</MudTd>
                <MudTd DataLabel="UserCooldown">@context.UserCooldown</MudTd>
                <MudTd DataLabel="GlobalCooldown">@context.GlobalCooldown</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>


@code {
    private List<CommandModel> commands = new();
    private string searchString1 = "";

    public class CommandModel
    {
        public string Command { get; set; } = "";
        public int UserCooldown { get; set; }
        public int GlobalCooldown { get; set; }
        public Rank Rank { get; set; } = Rank.Viewer;
        public int Cost { get; set; }
        public string Description { get; set; } = "";

    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();
        var user = authState.User;
        var commandHandlerCommands = await CommandHandler.GetDefaultCommandsFromDb();
        var tempCommands = new List<CommandModel>();
        foreach(var command in commandHandlerCommands.Where(x => x.Disabled == false))
        {
            tempCommands.Add(new CommandModel
                {
                    Command = command.CustomCommandName,
                    UserCooldown = command.UserCooldown,
                    GlobalCooldown = command.GlobalCooldown,
                    Rank = command.MinimumRank,
                    Cost = command.Cost,
                    Description = command.ModuleName
                });
        }

        var customCommands = CustomCommand.GetCustomCommands();
        foreach (var command in customCommands.Where(x => x.Value.Disabled == false))
        {
            tempCommands.Add(new CommandModel
                {
                    Command = command.Value.CommandName,
                    UserCooldown = command.Value.UserCooldown,
                    GlobalCooldown = command.Value.GlobalCooldown,
                    Rank = command.Value.MinimumRank,
                    Cost = command.Value.Cost,
                    Description = command.Value.Response
                });
        }

        var audioCommands = AudioCommands.GetAudioCommands();
        foreach (var command in audioCommands.Where(x => x.Value.Disabled == false))
        {
            tempCommands.Add(new CommandModel
                {
                    Command = command.Value.CommandName,
                    UserCooldown = command.Value.UserCooldown,
                    GlobalCooldown = command.Value.GlobalCooldown,
                    Rank = command.Value.MinimumRank,
                    Cost = command.Value.Cost,
                    Description = command.Value.AudioFile
                });
        }

        if (user.Identity is not null && user.Identity.IsAuthenticated && (user.IsInRole("Moderator") || user.IsInRole("Streamer")))
        {
            commands = tempCommands;
        } else
        {
            commands = tempCommands.Where(x => x.Rank < Rank.Moderator).ToList();
        }

    }

    private bool FilterFunc1(CommandModel element) => FilterFunc(element, searchString1);

    private bool FilterFunc(CommandModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Command.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Rank.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
