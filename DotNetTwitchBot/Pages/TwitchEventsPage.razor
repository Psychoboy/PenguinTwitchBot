@page "/events"
@using DotNetTwitchBot.Bot.Commands.TwitchEvents
@attribute [Authorize(Roles = "Streamer, Editor")]
@inject DotNetTwitchBot.Bot.Commands.TwitchEvents.ITwitchEventsService TwitchEventsService
@inject DotNetTwitchBot.Bot.TwitchServices.ITwitchWebsocketHostedService TwitchWebsocketHostedService


<PageTitle>SPTV Twitch Bot - Channel Points</PageTitle>

<MudContainer>
    <MudGrid>
        <MudItem xs="8">
            <MudPaper Elevation="2" Class="pa-4">
                <MudTable Items="@TwitchEvents">
                    <HeaderContent>
                        <MudTh>Type</MudTh>
                        <MudTh>Command</MudTh>
                        <MudTh>Message</MudTh>
                        <MudTh>Permission</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.EventType</MudTd>
                            <MudTd>@context.Command</MudTd>
                            <MudTd>@context.Message</MudTd>
                            <MudTd>@context.ElevatedPermission</MudTd>
                            <MudTd DataLabel="Delete">
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                                           @onclick="() => DeleteEvent(context)">
                                    Delete
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
            <MudItem xs="4">
                <MudCard>
                    <MudPaper Elevation="2" Class="pa-4">
                        <EditForm Model="@TwitchEvent" OnValidSubmit="OnSubmit">
                            <MudSelect @bind-Value="@TwitchEvent.EventType" Label="Event Type">
                                @foreach (TwitchEventType item in Enum.GetValues(typeof(TwitchEventType)))
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        <MudTextField Label="Command" Required="true" @bind-Value="TwitchEvent.Command" />
                        <MudTextField Label="Message" Required="true" @bind-Value="TwitchEvent.Message" />
                            <MudSelect @bind-Value="@TwitchEvent.ElevatedPermission" Label="Execute As">
                                @foreach (Rank item in Enum.GetValues(typeof(Rank)))
                            {
                                <MudSelectItem Value="@item">@item</MudSelectItem>
                            }
                        </MudSelect>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                   Class="ml-auto">
                            Submit
                        </MudButton>
                    </EditForm>
                    <MudText> Ads - (length) (automatic) (startdate)</MudText>
                </MudPaper>
                <MudPaper Elevation="2" Class="pa-4">
                    <MudButton OnClick="TestAdbreak" Variant="Variant.Outlined" Color="Color.Tertiary">Test Ad Break</MudButton>
                    <MudButton OnClick="TestStreamOnline" Variant="Variant.Outlined" Color="Color.Tertiary">Test Stream Online</MudButton>
                    <MudButton OnClick="TestStreamOffline" Variant="Variant.Outlined" Color="Color.Tertiary">Test Stream Offline</MudButton>
                </MudPaper>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private IEnumerable<DotNetTwitchBot.Bot.Models.TwitchEvent>? TwitchEvents { get; set; }
    private DotNetTwitchBot.Bot.Models.TwitchEvent TwitchEvent { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        TwitchEvents = await TwitchEventsService.GetTwitchEvents();
        await base.OnInitializedAsync();
    }

    private async Task DeleteEvent(DotNetTwitchBot.Bot.Models.TwitchEvent ev)
    {
        await TwitchEventsService.DeleteTwitchEvent(ev);
        TwitchEvents = await TwitchEventsService.GetTwitchEvents();
        StateHasChanged();
    }

    private async Task OnSubmit()
    {
        await TwitchEventsService.AddTwitchEvent(TwitchEvent);
        TwitchEvents = await TwitchEventsService.GetTwitchEvents();
        TwitchEvent = new();
        StateHasChanged();
    }

    private async Task TestAdbreak()
    {
        await TwitchWebsocketHostedService.AdBreak(new DotNetTwitchBot.Bot.Events.AdBreakStartEventArgs
            {
                Length = 30,
                Automatic = true,
                StartedAt = DateTime.Now
            });
    }

    private async Task TestStreamOnline()
    {
        await TwitchWebsocketHostedService.StreamOnline();
    }

    private async Task TestStreamOffline()
    {
        await TwitchWebsocketHostedService.StreamOffline();
    }
}
