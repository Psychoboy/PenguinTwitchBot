@page "/timergroups"
@attribute [Authorize(Roles = "Streamer, Editor")]
@inject DotNetTwitchBot.Bot.Commands.Misc.AutoTimers Timers
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<PageTitle>SPTV Twitch Bot - Timers</PageTitle>

@if (timerGroups != null)
{
    <MudGrid>
        <MudItem xs="9">
            <MudPaper Elevation="2" Class="pa-2">
                <MudTable Items="@timerGroups">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Active</MudTh>
                        <MudTh>Min. Time</MudTh>
                        <MudTh>Max Time</MudTh>
                        <MudTh>Min. Msg</MudTh>
                        <MudTh>Last Run</MudTh>
                        <MudTh>Next Run</MudTh>
                        <MudTh></MudTh>
                        <MudTh></MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Active">@context.Active</MudTd>
                        <MudTd DataLabel="Min Time">@context.IntervalMinimum</MudTd>
                        <MudTd DataLabel="Max Time">@context.IntervalMaximum</MudTd>
                        <MudTd DataLabel="Min Msg">@context.MinimumMessages</MudTd>
                        <MudTd DataLabel="Last Run">@context.LastRun</MudTd>
                        <MudTd DataLabel="Next Run">@context.NextRun</MudTd>
                        <MudTd DataLabel="Toggle">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => Edit(context)">Edit
                            </MudButton>
                        </MudTd>
                        <MudTd DataLabel="Delete">
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="() => Delete(context)">
                                Delete
                            </MudButton>
                        </MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="() => Run(context)">Run</MudButton>"
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
        <MudItem xs="3">
            <MudPaper Elevation="2" Class="pa-2">
                <EditForm Model="@timerGroup" OnValidSubmit="AddTimerGroup">
                    <DataAnnotationsValidator />
                    <MudTextField Label="Name" Required="true" RequiredError="Name is required"
                    @bind-Value="timerGroup.Name" />
                    <MudNumericField @bind-Value="@timerGroup.IntervalMinimum" Label="Minimum Interval"
                        Variant="Variant.Text">
                    </MudNumericField>
                    <MudNumericField @bind-Value="@timerGroup.IntervalMaximum" Label="Maximum Interval"
                        Variant="Variant.Text">
                    </MudNumericField>
                    <MudNumericField @bind-Value="@timerGroup.MinimumMessages" Label="Minimum Messages"
                        Variant="Variant.Text">
                    </MudNumericField>

                    <MudCheckBox @bind-Value="@timerGroup.Active" Label="Enabled?"></MudCheckBox>
                    <MudCheckBox @bind-Value="@timerGroup.Repeat" Label="Repeat?"></MudCheckBox>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                        Class="ml-auto">
                        Submit
                    </MudButton>
                </EditForm>
            </MudPaper>
        </MudItem>

    </MudGrid>
}

@code {
    private List<DotNetTwitchBot.Bot.Models.Timers.TimerGroup>? timerGroups;
    private DotNetTwitchBot.Bot.Models.Timers.TimerGroup timerGroup = new();
    [Inject] private IDialogService DialogService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        timerGroups = await Timers.GetTimerGroupsAsync();
    }

    private void Edit(DotNetTwitchBot.Bot.Models.Timers.TimerGroup item)
    {
        navigationManager.NavigateTo($"/timermessages/{item.Id}");
    }

    private async Task Delete(DotNetTwitchBot.Bot.Models.Timers.TimerGroup item)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        if (result != null)
        {
            await Timers.DeleteTimerGroup(item);
            timerGroups = await Timers.GetTimerGroupsAsync();
            StateHasChanged();
        }
    }

    private async Task AddTimerGroup()
    {

        await Timers.AddTimerGroup(timerGroup);
        timerGroups = await Timers.GetTimerGroupsAsync();
        timerGroup = new();
        StateHasChanged();
    }

    private async Task Run(DotNetTwitchBot.Bot.Models.Timers.TimerGroup item)
    {
        await Timers.RunGroup(item); 
    }
}