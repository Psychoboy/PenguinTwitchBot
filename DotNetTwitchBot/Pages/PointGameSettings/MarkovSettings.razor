@attribute [Authorize(Roles = "Streamer, Editor")]
@using DotNetTwitchBot.Bot.Commands.Games
@using DotNetTwitchBot.Bot.Commands.Markov

<MudPaper>
    <MudText Typo="Typo.h5">Markov Settings</MudText>
    <MudDivider Class="mb-2 mt-2" />
    <MudNumericField Label="Level" @bind-Value="level" HelperText="The level of the Markov chain (Starting message)" />
    <MudTextField Label="Exclude Bots" @bind-Value="excludeBots" HelperText="Comma separated list of bots to exclude" />
    <MudText>Recommended to re-learn or restart bot after saving</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SaveSettings">Save</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="Relearn">Relearn</MudButton>
</MudPaper>

@code {
    [Inject]
    private IGameSettingsService gameSettingsService { get; set; } = null!;
    [Inject]
    private ISnackbar Snackbar { get; set; } = null!;
    [Inject]
    private IMarkovChat markovChat { get; set; } = null!;
    private string excludeBots { get; set; } = null!;
    private int level { get; set; } = 2;

    protected override async Task OnInitializedAsync()
    {
        excludeBots = await gameSettingsService.GetStringSetting(
            MarkovChat.GAMENAME, MarkovChat.EXCLUDE_BOTS,
                    "streamelements,streamlabs,nightbot,moobot,ankhbot,phantombot,wizebot,super_waffle_bot,defbott,drinking_buddy_bot,dixperbot,lumiastream"
        );
        level = await gameSettingsService.GetIntSetting(MarkovChat.GAMENAME, MarkovChat.LEVEL, 2);
    }

    private async Task SaveSettings()
    {
        await gameSettingsService.SetStringSetting(MarkovChat.GAMENAME, MarkovChat.EXCLUDE_BOTS, excludeBots);
        await gameSettingsService.SetIntSetting(MarkovChat.GAMENAME, MarkovChat.LEVEL, level);
        await markovChat.UpdateBots();
        Snackbar.Add("Markov settings saved.", Severity.Success);
    }

    private async Task Relearn()
    {
        await markovChat.Relearn();
        Snackbar.Add("Markov chat relearned.", Severity.Success);
    }
}
