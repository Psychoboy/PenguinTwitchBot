@page "/pointsettings"
@using DotNetTwitchBot.Bot.Core.Points
@using DotNetTwitchBot.Bot.Models.Points
@attribute [Authorize(Roles = "Streamer")]

<PageTitle>SPTV Twitch Bot - Point Settings</PageTitle>

<MudContainer Class="pa-6" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="6">
            <GamePointSettings />
        </MudItem>
        <MudItem xs="6">
            <MudText Typo="Typo.h5">Basic descripts of the various games</MudText>
            <MudText>The games were originally designed with 2 different points in mind.
                The first list is the more wreckless fun games. While the second is the more
                serious ones designed with Giveaways in mind. You can configure these to use any point types
                you want. You can also have as many point types as you want. The seperation is simply a 
                suggest.
            </MudText>
            <MudDivider/>
            <MudText Typo="Typo.h5">Suggested "Fun" Games</MudText>
            <MudText Typo="Typo.h6">Defuse</MudText>
            <MudText>Simple game where a user defuses a bomb by choosing a color</MudText>
            <MudText Typo="Typo.h6">FFA</MudText>
            <MudText>A free for all battle, winner takes all</MudText>
            <MudText Typo="Typo.h6">Gamble</MudText>
            <MudText>A way to gamble those points away</MudText>
            <MudText Typo="Typo.h6">Heist</MudText>
            <MudText>A heist where multiple people can join and some may succeed rather others may fail.</MudText>
            <MudText Typo="Typo.h6">Roll</MudText>
            <MudText>Roll some dice for a chance at points</MudText>
            <MudText Typo="Typo.h6">Slots</MudText>
            <MudText>Spin the wheel to win some points. The more emotes the lower the odds of winning</MudText>
            <MudText Typo="Typo.h6">Steal</MudText>
            <MudText>Attempt to steal points from another viewer</MudText>
            <MudText Typo="Typo.h6">Tax</MudText>
            <MudText>Post stream tax. After the stream has been offline for a bit process a tax removing
                a small percentage of points up to a max for anyone who did not show up in stream.</MudText>
            <MudText Typo="Typo.h6">Top</MudText>
            <MudText>Top5/10 watch time, points, messages</MudText>
            <MudDivider />
            <MudText Typo="Typo.h5">Suggested games for more serious points ie. Giveaways</MudText>
            <MudText Typo="Typo.h6">AddActive</MudText>
            <MudText>Add points to all active viewers in chat. Can be used multiple times to stack up the points
                then after a small period of time distributes all the points at once.
            </MudText>
            <MudText Typo="Typo.h6">Bonus</MudText>
            <MudText>User can get bonus points once a stream via the web interface</MudText>
            <MudText Typo="Typo.h6">DuelGame</MudText>
            <MudText>Duel another viewer to win/lose tickets against opponent. The opponent must accept the duel.</MudText>
            <MudText Typo="Typo.h6">First</MudText>
            <MudText>Allows people to do a !first type of command and based on order lower amount of points awarded</MudText>
            <MudText Typo="Typo.h6">GiveawayFeature</MudText>
            <MudText>Used to run giveaways</MudText>
            <MudText Typo="Typo.h6">LoyaltyFeature</MudText>
            <MudText>Awards points for Cheers, Subs, etc...</MudText>
            <MudText Typo="Typo.h6">Raffle</MudText>
            <MudText>Do various raffles for points in chat</MudText>
            <MudText Typo="Typo.h6">Roulette</MudText>
            <MudText>Gamble those points away with a max per stream</MudText>
            <MudText Typo="Typo.h6">TicketsFeature</MudText>
            <MudText>Periodically gives points with bonuses based on subs and such if active in chat.</MudText>
        </MudItem>
        <MudItem xs="9">
            <MudPaper>
                <MudTable Items="@PointTypes">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh></MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Name</MudTd>
                        <MudTd>@context.Description</MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => EditPointType(context)">Edit</MudButton>
                        </MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="() => DeletePointType(context)">Delete</MudButton>
                        </MudTd>
                    </RowTemplate>
                    <ChildRowContent>
                        <MudTr>
                            <td>
                                <MudCard>
                                    <MudCardHeader>
                                        Commands for <strong>@context.Name</strong>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <MudTable Items="@context.PointCommands.ToList()" Context="CommandContext">
                                            <HeaderContent>
                                                <MudTh>Command</MudTh>
                                                <MudTh>Command Description</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd>@CommandContext.CommandName</MudTd>
                                                <MudTd>@CommandContext.CommandType</MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </MudCardContent>
                                </MudCard>
                            </td>
                        </MudTr>
                    </ChildRowContent>
                </MudTable>
            </MudPaper>
        </MudItem>
        <MudItem xs="3">
            <MudPaper>
                <EditForm Model="@newPointType" OnValidSubmit="SavePointType">
                    <DataAnnotationsValidator />
                    <MudTextField Label="Name" @bind-Value="newPointType.Name" />
                    <MudTextField Label="Description" @bind-Value="newPointType.Description" />
                    <MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="GenerateCommands">GenerateCommands</MudButton>
                    <MudTextField Label="Add Command" @bind-Value="newPointType.PointCommands.First(x => x.CommandType == PointCommandType.Add).CommandName" />
                    <MudTextField Label="Remove Command" @bind-Value="newPointType.PointCommands.First(x => x.CommandType == PointCommandType.Remove).CommandName" />
                    <MudTextField Label="Get Command" @bind-Value="newPointType.PointCommands.First(x => x.CommandType == PointCommandType.Get).CommandName" />
                    <MudTextField Label="Set Command" @bind-Value="newPointType.PointCommands.First(x => x.CommandType == PointCommandType.Set).CommandName" />
                    <MudTextField Label="Add Active Command" @bind-Value="newPointType.PointCommands.First(x => x.CommandType == PointCommandType.AddActive).CommandName" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
                </EditForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private IEnumerable<PointType> PointTypes { get; set; } = [];
    private PointType newPointType = CreateNewPointType();
    [Inject] IPointsSystem pointSystem { get; set; } = default!;
    [Inject] ISnackbar Snackbar { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        PointTypes = await pointSystem.GetPointTypes();
        newPointType = CreateNewPointType();
    }

    private async Task SavePointType()
    {
        await pointSystem.UpdatePointType(newPointType);
        newPointType = CreateNewPointType();
        PointTypes = await pointSystem.GetPointTypes();
    }

    private static PointType CreateNewPointType()
    {
        return new PointType
            {
                PointCommands = new List<PointCommand>
                {
                    new PointCommand { CommandType = PointCommandType.Add },
                    new PointCommand { CommandType = PointCommandType.Remove },
                    new PointCommand { CommandType = PointCommandType.Get },
                    new PointCommand { CommandType = PointCommandType.Set },
                    new PointCommand { CommandType = PointCommandType.AddActive }
                }
            };
    }

    private void EditPointType(PointType pointType)
    {
        newPointType = pointType;
    }

    private async Task DeletePointType(PointType pointType)
    {
        if(pointType.Id == 1)
        {
            Snackbar.Add("You can not delete the primary points. You can edit/rename it only.", Severity.Error);
            return;
        }
        await pointSystem.DeletePointType(pointType.Id.GetValueOrDefault());
        PointTypes = await pointSystem.GetPointTypes();
    }

    private void GenerateCommands()
    {
        newPointType.PointCommands.First(x => x.CommandType == PointCommandType.Add).CommandName = $"!add{newPointType.Name.ToLower()}";
        newPointType.PointCommands.First(x => x.CommandType == PointCommandType.Remove).CommandName = $"!remove{newPointType.Name.ToLower()}";
        newPointType.PointCommands.First(x => x.CommandType == PointCommandType.Get).CommandName = $"!get{newPointType.Name.ToLower()}";
        newPointType.PointCommands.First(x => x.CommandType == PointCommandType.Set).CommandName = $"!set{newPointType.Name.ToLower()}";
        newPointType.PointCommands.First(x => x.CommandType == PointCommandType.AddActive).CommandName = $"!addactive{newPointType.Name.ToLower()}";
    }
}
