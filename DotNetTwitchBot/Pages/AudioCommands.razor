@page "/audiocommands"
@inject DotNetTwitchBot.Bot.Commands.Custom.AudioCommands AudioCommand
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<PageTitle>Audio Commands</PageTitle>
<style type="text/css">
    .white-text {
        color: white;

    }
</style>

@if (audioCommands == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table white-text">
        <thead>
            <tr>
                <th>Command</th>
                <th>Audio File</th>
                <th>Disabled</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var command in audioCommands)
            {
                <tr>
                    <td>!@command.Key</td>
                    <td>@command.Value.AudioFile</td>
                    <td>@command.Value.Disabled</td>
                    <td><button class="btn btn-primary btn-xs" @onclick="() => Edit(command.Value)">Edit</button></td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="ReloadCommands">Reload Audio Commands</button>
    <div>
        <input placeholder="Name" @bind="commandName" />
        <input placeholder="Audio File" @bind="audioFile" />
        <input placeholder="User CD" @bind="commandUserCd" />
        <input placeholder="Global CD" @bind="commandGlobalCd" />
        <button class="btn btn-primary" @onclick="AddCommand">Add Audio Command</button>
    </div>

}

@code {
    private Dictionary<string, DotNetTwitchBot.Bot.Models.AudioCommand>? audioCommands;
    private string? commandName;
    private string? audioFile;
    private string? commandUserCd;
    private string? commandGlobalCd;
    protected override Task OnInitializedAsync()
    {
        audioCommands = AudioCommand.GetAudioCommands();
        return Task.CompletedTask;
    }

    private void ReloadCommands()
    {
        audioCommands = AudioCommand.GetAudioCommands();
        StateHasChanged();
    }

    private async Task AddCommand()
    {
        if (!string.IsNullOrWhiteSpace(commandName) &&
        !string.IsNullOrWhiteSpace(audioFile) &&
        !string.IsNullOrWhiteSpace(commandUserCd) &&
        !string.IsNullOrWhiteSpace(commandGlobalCd))
        {
            var command = new DotNetTwitchBot.Bot.Models.AudioCommand
                {
                    CommandName = commandName,
                    UserCooldown = Int32.Parse(commandUserCd),
                    GlobalCooldown = Int32.Parse(commandGlobalCd),
                    AudioFile = audioFile
                };
            await AudioCommand.AddAudioCommand(command);
            ReloadCommands();
        }
    }

    private void Edit(DotNetTwitchBot.Bot.Models.AudioCommand item)
    {
        navigationManager.NavigateTo($"/editaudiocommand/{item.Id}");
    }
}