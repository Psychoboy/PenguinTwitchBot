@page "/musicplayer"
@attribute [Authorize(Roles = "Streamer")]
@layout NoMenuLayout
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject DotNetTwitchBot.Bot.Commands.Music.YtPlayer YtPlayer
@implements IAsyncDisposable
@inject ISnackbar Snackbar
@inject ILogger<MusicPlayer> logger

<PageTitle>SPTV Twitch Bot - Music Player</PageTitle>
<MudContainer MaxWidth="MaxWidth.False">

    <MudGrid>
        @if (currentSong != null)
        {
            <MudItem sm="6" md="4">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText>Current Song: @currentSong.Title</MudText>
                    <MudText>Requested By: @currentSong.RequestedBy</MudText>
                    <MudText>Duration: @currentSong.Duration</MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="StealSong">Steal Song</MudButton>
                </MudPaper>
            </MudItem>

        }
        <MudItem xs="6" sm="6" md="6">
            @* <MudContainer Fixed="true"> *@
            <MudPaper Elevation="2" Class="pa-4" Height="400px" Width="650px">
                <div id="player" Height="390"></div>
            </MudPaper>
            @* </MudContainer> *@
        </MudItem>
        <MudItem xs="4">
            <MudPaper Elevation="2" Class="pa-4">
                <MudTextField @bind-Value="addSongUrl" Label="Add Song" Variant="Variant.Text"></MudTextField>
                <MudButton OnClick="AddSongRequest" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                    Color="Color.Primary" Class="ml-auto">
                    Add Song
                </MudButton>
            </MudPaper>
        </MudItem>

        @if (songRequests != null)
        {
            <MudItem xs="8">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h6">Song Requests: @songRequests.Count</MudText>
                    <MudTable Items="@songRequests">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Length</MudTh>
                            <MudTh>Requested By</MudTh>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.Title</MudTd>
                            <MudTd DataLabel="Duration">@context.Duration</MudTd>
                            <MudTd DataLabel="Requested By">@context.RequestedBy</MudTd>
                            <MudTd DataLabel="Edit">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                @onclick="() => Priority(context)">
                                    Priority</MudButton>
                            </MudTd>
                            <MudTd DataLabel="Delete">
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                                @onclick="() => RemoveSongRequest(context)">Remove
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
        @if (musicPlaylists != null)
        {
            <MudItem xs="4">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h6">Playlists</MudText>
                    <MudTable Items="@musicPlaylists">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Load</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.Name</MudTd>
                            <MudTd DataLabel="Load">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                @onclick="() => StartPlaylist(context)">
                                    Load</MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
        @if (currentPlayList != null)
        {
            <MudItem xs="8">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h6">Curent Playlist: @currentPlayList.Name - Total Songs
                        @currentPlayList.Songs.Count</MudText>
                    <MudTable Items="@currentPlayList.Songs">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Length</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.Title</MudTd>
                            <MudTd DataLabel="Duration">@context.Duration</MudTd>
                            <MudTd DataLabel="Edit">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                @onclick="() => RemoveSong(context)">
                                    Remove</MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private List<MusicPlaylist>? musicPlaylists;
    private MusicPlaylist? currentPlayList;
    private Song? currentSong;
    private List<Song>? songRequests;
    private HubConnection? hubConnection;
    private string? addSongUrl;
    [Inject]
    private IJSRuntime JsRuntime { get; set; } = default!;

    private Timer? _timer;
    private bool playerReady;
    private bool apiReady;
    private bool playerCreated;


    protected override async Task OnInitializedAsync()
    {
        musicPlaylists = await YtPlayer.Playlists();
        currentPlayList = await YtPlayer.CurrentPlaylist();
        currentSong = YtPlayer.GetCurrentSong();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;

        await JsRuntime.InvokeVoidAsync("initializeYouTubePlayer");
        _timer = new Timer(async (e) =>
        {
            try
            {
                playerReady = await JsRuntime.InvokeAsync<bool>("checkPlayer");
                apiReady = await JsRuntime.InvokeAsync<bool>("checkAPIReady");

                if (apiReady && !playerCreated)
                {
                    await JsRuntime.InvokeVoidAsync("createPlayer");
                    playerCreated = true;
                }

                if (playerReady)
                {
                    if(currentSong != null)
                    {
                        await JsRuntime.InvokeAsync<string>("playVideo", currentSong.SongId);
                    } else
                    {
                        await JsRuntime.InvokeAsync<string>("playVideo", await YtPlayer.GetNextSong());
                    }

                    _timer?.Dispose();
                }
            }
            catch (Exception)
            {
                _timer?.Dispose();
            }
        }, null, TimeSpan.Zero, TimeSpan.FromMilliseconds(500));
        
        hubConnection = new HubConnectionBuilder().WithAutomaticReconnect()
        .WithUrl(Navigation.ToAbsoluteUri("/ythub")).Build();

        hubConnection.On<Song?>("CurrentSongUpdate", (song) =>
        {
            currentSong = song;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<MusicPlaylist>("UpdateCurrentPlaylist", (playlist) =>
        {
            currentPlayList = playlist;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<Song>>("CurrentSongRequests", (playlist) =>
        {
            songRequests = playlist;
            InvokeAsync(StateHasChanged);
        });
        try
        {
            await hubConnection.StartAsync();
        }
        catch (TaskCanceledException)
        {
            Snackbar.Add("Lost connection to bot. Data may be inaccurate until refresh.", Severity.Warning);
            logger.LogWarning("User lost connection to bot.");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Lost connection to bot. Data may be inaccurate until refresh.", Severity.Warning);
            logger.LogWarning(ex, "Failed to connect to hub");
        }
    }

    private async Task StartPlaylist(MusicPlaylist musicPlaylist)
    {
        if (musicPlaylist != null && musicPlaylist.Id != null)
        {
            await YtPlayer.LoadPlayList((int)musicPlaylist.Id);
        }
    }

    private async Task Priority(Song song)
    {
        await YtPlayer.MoveSongToNext(song.SongId);
    }

    private async Task RemoveSong(Song song)
    {
        await YtPlayer.RemoveSong(song);
    }

    private async Task RemoveSongRequest(Song song)
    {
        await YtPlayer.RemoveSongRequest(song);
    }

    private async Task AddSongRequest()
    {
        if (addSongUrl == null) return;
        await YtPlayer.AddSongToRequests(addSongUrl);
        addSongUrl = "";
    }

    private async Task StealSong()
    {
        await YtPlayer.StealCurrentSong();
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}