@page "/customcommands"
@inject DotNetTwitchBot.Bot.Commands.Custom.CustomCommand CustomCommand
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<PageTitle>Custom Commands</PageTitle>

<MudButton OnClick="AddCommand" Variant="Variant.Filled" Color="Color.Primary">Create Custom Command</MudButton>

@if (commands == null)
{
    <MudAlert Severity="Severity.Info">Loading...</MudAlert>
}
else
{
    <MudTable Items="@commands">
        <HeaderContent>
            <MudTh>Command</MudTh>
            <MudTh>Response</MudTh>
            <MudTh>Disabled</MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Command">!@context.Key</MudTd>
            <MudTd DataLabel="Response">@context.Value.Response</MudTd>
            <MudTd DataLabel="Disabled">@context.Value.Disabled</MudTd>
            <MudTd DataLabel="Edit">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => Edit(context.Value)">Edit
                </MudButton>
            </MudTd>
            <MudTd DataLabel="Delete">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="() => Delete(context.Value)">Delete
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private Dictionary<string, DotNetTwitchBot.Bot.Models.CustomCommands>? commands;
    protected override Task OnInitializedAsync()
    {
        commands = CustomCommand.GetCustomCommands();
        return Task.CompletedTask;
    }

    private void ReloadCommands()
    {
        commands = CustomCommand.GetCustomCommands();
        StateHasChanged();
    }

    private void AddCommand()
    {
        navigationManager.NavigateTo($"/customcommands/create");
    }

    private async Task Delete(DotNetTwitchBot.Bot.Models.CustomCommands item)
    {
        await CustomCommand.DeleteCommand(item);
        ReloadCommands();
    }

    private void Edit(DotNetTwitchBot.Bot.Models.CustomCommands item)
    {
        navigationManager.NavigateTo($"/customcommands/{item.Id}");
    }
}