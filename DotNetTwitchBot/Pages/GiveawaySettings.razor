@page "/giveawaysettings"
@attribute [Authorize(Roles = "Streamer")]
@using Microsoft.AspNetCore.SignalR.Client
@using DotNetTwitchBot.Bot.Models.Giveaway
@inject DotNetTwitchBot.Bot.Commands.Features.GiveawayFeature GiveawayFeature;
@inject DotNetTwitchBot.Bot.Commands.Features.ITicketsFeature TicketsFeature;
@inject DotNetTwitchBot.Bot.Core.Database.IDatabaseTools DatabaseTools;
@inject NavigationManager Navigation

<PageTitle>SPTV Twitch Bot - Giveaway Settings</PageTitle>

<MudCard>
    <MudCardContent>
        <MudTextField Label="Prize" Required="true" RequiredError="Prize is required" @bind-Value="@Prize" />
        <MudTextField Label="Image Url" Required="false" @bind-Value="@Image" />
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
            OnClick="OnPrizeSubmit">
            Submit
        </MudButton>
    </MudCardContent>
</MudCard>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Reset">Reset</MudButton>

@code {
    private string? Prize { get; set; }
    private string? Image { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Prize = await GiveawayFeature.GetPrize();
        Image = await GiveawayFeature.GetImageUrl();
    }

    public async void OnPrizeSubmit()
    {
        if (Prize == null) return;
        await GiveawayFeature.SetPrize(Prize);
        await GiveawayFeature.SetImageUrl(Image);
    }

    public async void Reset()
    {
        await DatabaseTools.Backup();
        await GiveawayFeature.Reset();
        await TicketsFeature.ResetAllPoints();
    }
}