@page "/blacklist"
@attribute [Authorize(Roles = "Streamer, Editor")]
@using DotNetTwitchBot.Bot.Models;
@inject DotNetTwitchBot.Bot.Commands.Moderation.Blacklist BlacklistApi
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<PageTitle>SPTV Twitch Bot - Blacklist</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        @if (wordFilters != null)
        {
            <MudItem xs="9">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudTable Items="@wordFilters">
                        <HeaderContent>
                            <MudTh>Phrase</MudTh>
                            <MudTh>Message</MudTh>
                            <MudTh>Timeout Length</MudTh>
                            <MudTh>Is Regex</MudTh>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Phrase">@context.Phrase</MudTd>
                            <MudTd DataLabel="Message">@context.Message</MudTd>
                            <MudTd DataLabel="Timeout Length">@context.TimeOutLength</MudTd>
                            <MudTd DataLabel="Is Regex">@context.IsRegex</MudTd>
                            <MudTd DataLabel="Edit">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => Edit(context)">
                                    Edit</MudButton>
                            </MudTd>
                            <MudTd DataLabel="Delete">
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                                @onclick="() => Delete(context)">Delete
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
        @if (wordFilter != null)
        {
            <MudItem xs="3">
                <MudPaper Elevation="2" Class="pa-4">
                    <EditForm Model="@wordFilter" OnValidSubmit="OnSubmit">
                        <DataAnnotationsValidator />
                        <MudCardContent>
                            <MudTextField Label="Phrase" Required="true" RequiredError="Phrase is required"
                            @bind-Value="wordFilter.Phrase" />
                            <MudCheckBox @bind-Value="@wordFilter.IsRegex" Label="Is Regex?"></MudCheckBox>
                            <MudTextField Label="Message" Required="true" RequiredError="Message is required"
                            @bind-Value="wordFilter.Message" />
                            <MudTextField Label="Ban Reason" Required="true" RequiredError="Ban Reason is required"
                            @bind-Value="wordFilter.BanReason" />
                            <MudNumericField @bind-Value="@wordFilter.TimeOutLength" Label="Timeout Length"
                                Variant="Variant.Text">
                            </MudNumericField>
                            <MudCheckBox @bind-Value="@wordFilter.IsSilent" Label="Is Silent?"></MudCheckBox>
                            <MudCheckBox @bind-Value="@wordFilter.ExcludeRegulars" Label="Exclude Regulars?">
                            </MudCheckBox>
                            <MudCheckBox @bind-Value="@wordFilter.ExcludeSubscribers" Label="Exclude Subscribers?">
                            </MudCheckBox>
                            <MudCheckBox @bind-Value="@wordFilter.ExcludeVips" Label="Exclude Vips?"></MudCheckBox>

                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                Class="ml-auto">
                                Submit
                            </MudButton>
                        </MudCardContent>
                    </EditForm>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private List<WordFilter>? wordFilters;
    private WordFilter? wordFilter { get; set; } = new();
    [Inject] private IDialogService DialogService { get; set; } = default!;

    protected override Task OnInitializedAsync()
    {
        wordFilters = BlacklistApi.GetBlackList();
        return Task.CompletedTask;
    }

    private async Task Delete(WordFilter wordFilter)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        if (result != null)
        {
            await BlacklistApi.DeleteBlacklist(wordFilter);
            wordFilters = BlacklistApi.GetBlackList();
            StateHasChanged();
        }
    }

    public void Edit(WordFilter item)
    {
        navigationManager.NavigateTo($"/blacklist/{item.Id}");
    }

    public async void OnSubmit()
    {
        if (wordFilter == null) return;
        await BlacklistApi.UpdateBlacklist(wordFilter);
        wordFilters = BlacklistApi.GetBlackList();
        wordFilter = new();
        StateHasChanged();
    }
}