@page "/blacklist"
@using DotNetTwitchBot.Bot.Models;
@inject DotNetTwitchBot.Bot.Commands.Moderation.Blacklist BlacklistApi
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<PageTitle>Blacklist</PageTitle>
<MudButton OnClick="CreateFilter" Variant="Variant.Filled" Color="Color.Primary">Create Filter</MudButton>
@if (wordFilters == null)
{
    <MudAlert Severity="Severity.Info">Loading...</MudAlert>
}
else
{
    <MudTable Items="@wordFilters">
        <HeaderContent>
            <MudTh>Phrase</MudTh>
            <MudTh>Message</MudTh>
            <MudTh>Timeout Length</MudTh>
            <MudTh>Is Regex</MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Phrase">@context.Phrase</MudTd>
            <MudTd DataLabel="Message">@context.Message</MudTd>
            <MudTd DataLabel="Timeout Length">@context.TimeOutLength</MudTd>
            <MudTd DataLabel="Is Regex">@context.IsRegex</MudTd>
            <MudTd DataLabel="Edit">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => Edit(context)">Edit</MudButton>
            </MudTd>
            <MudTd DataLabel="Delete">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="() => Delete(context)">Delete
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private List<WordFilter>? wordFilters;

    protected override Task OnInitializedAsync()
    {
        wordFilters = BlacklistApi.GetBlackList();
        return Task.CompletedTask;
    }

    private async Task Delete(WordFilter wordFilter)
    {
        await BlacklistApi.DeleteBlacklist(wordFilter);
        wordFilters = BlacklistApi.GetBlackList();
        StateHasChanged();
    }

    public void Edit(WordFilter item)
    {
        navigationManager.NavigateTo($"/blacklist/{item.Id}");
    }

    public void CreateFilter()
    {
        navigationManager.NavigateTo($"/blacklist/0");
    }
}