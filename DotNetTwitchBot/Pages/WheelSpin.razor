@page "/wheelspin"
@using DotNetTwitchBot.Bot
@using DotNetTwitchBot.Bot.Models.Wheel
@attribute [Authorize(Roles = "Streamer")]
@inject DotNetTwitchBot.Bot.Commands.WheelSpin.IWheelService WheelService

<PageTitle>SPTV Twitch Bot - Wheel Spins</PageTitle>

<MudContainer Class="pa-6" MaxWidth="MaxWidth.False">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => OpenViewerWheel()">Open Viewer Wheel</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="() => ShowViewerWheel()">Show Viewer Wheel</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Warning" @onclick="() => CloseViewersWheel()">Close Viewer Wheel</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="() => SpinViewersWheel()">Spin Viewer Wheel</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="() => HideWheel()">Hide Wheel</MudButton>
    <MudGrid>
        <MudItem xs="9">
            <MudPaper>
                <MudTable Items="@Wheels">
                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Number of Items</MudTh>
                        <MudTh></MudTh>
                        <MudTh></MudTh>
                        <MudTh></MudTh>
                        <MudTh></MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Id</MudTd>
                        <MudTd>@context.Name</MudTd>
                        <MudTd>@context.Properties.Count</MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                        @onclick="() => ShowWheel(context)">Show</MudButton></MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Filled" Color="Color.Success"
                                       @onclick="() => SpinWheel(context)">Spin</MudButton>
                        </MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                                       @onclick="() => HideWheel()">Hide</MudButton>
                        </MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                                       @onclick="() => EditWheel(context)">Edit</MudButton>

                        </MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                                       @onclick="() => DeleteWheel(context)">Delete</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
        <MudItem xs="3">
            <MudPaper>
                <EditForm Model="@newWheel" OnValidSubmit="SaveWheel">
                    <DataAnnotationsValidator />
                    <MudTextField Label="Name" Required="true" RequiredError="Name is required" @bind-Value="newWheel.Name" />
                    <MudTextField Label="Winning Message" Required="true" RequiredError="Message Required" @bind-Value="newWheel.WinningMessage" />
                    <MudTextField Label="Add Property" @bind-Value="propertyName" />
                    <MudTextField Label="Weight" @bind-Value="weight" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => AddProperty()">Add Property</MudButton>
                    <MudTextField Label="Bulk Add Properties" Lines="8" @bind-Value="bulkPropertyNames" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => AddProperties()">Add Properties</MudButton>
                    <MudDivider class="mb-2" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save Wheel</MudButton>
                    <MudDivider class="mb-2" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               @onclick="() => ShowWheel(newWheel)">Show</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Success"
                               @onclick="() => SpinWheel(newWheel)">Spin</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                               @onclick="() => HideWheel()">Hide</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                               @onclick="() => ShuffleWheel()">Shuffle</MudButton>
                </EditForm>
                <MudTable Items="@newWheel.Properties">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Weight</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Label</MudTd>
                        <MudTd>@context.Weight</MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                                       @onclick="() => RemoveProperty(context)">Delete</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
@code {
    private List<Wheel>? Wheels { get; set; } = new();
    private string propertyName { get; set; } = string.Empty;
    private string bulkPropertyNames { get; set; } = string.Empty;
    private float weight { get; set; } = 1;
    private Wheel newWheel { get; set; } = new();
    private List<WheelProperty> propertiesToDelete { get; set; } = new();
    [Inject] private IDialogService DialogService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Wheels = await WheelService.GetWheels();
    }

    private void OpenViewerWheel()
    {
        WheelService.OpenNameWheel();
    }

    private void ShowViewerWheel()
    {
        WheelService.ShowNameWheel();
    }

    private void SpinViewersWheel()
    {
        WheelService.SpinNameWheel();
    }

    private void CloseViewersWheel()
    {
        WheelService.CloseNameWheel();
    }

    private void ShuffleWheel()
    {
        var props = newWheel.Properties;
        props.Shuffle();
        newWheel.Properties = props;
    }

    private void RemoveProperty(WheelProperty property)
    {
        newWheel.Properties.Remove(property);
        propertiesToDelete.Add(property);
    }

    private void AddProperties()
    {
        var names = bulkPropertyNames.Split("\n");
        foreach (var name in names)
        {
            var trimmedName = name.Trim();
            if (string.IsNullOrWhiteSpace(trimmedName))
            {
                continue;
            }
            newWheel.Properties.Add(new WheelProperty { Label = trimmedName, Weight = 1 });
        }
        bulkPropertyNames = string.Empty;
        weight = 1;
    }

    private void AddProperty()
    {
        newWheel.Properties.Add(new WheelProperty { Label = propertyName, Weight = weight });
        propertyName = string.Empty;
        weight = 1;
    }

    public async void SaveWheel()
    {
        if (newWheel.Id == null || newWheel.Id == 0)
        {
            await WheelService.AddWheel(newWheel);
        }
        else
        {
            await WheelService.SaveWheel(newWheel);
            await WheelService.DeleteProperties(propertiesToDelete);
        }
        newWheel = new Wheel();
        propertiesToDelete = new List<WheelProperty>();
        Wheels = await WheelService.GetWheels();
        StateHasChanged();
    }

    private void ShowWheel(Wheel wheel)
    {
        WheelService.ShowWheel(wheel);
    }

    private void HideWheel()
    {
        WheelService.HideWheel();
    }

    private void SpinWheel(Wheel wheel)
    {
        WheelService.SpinWheel(wheel);
    }

    private void EditWheel(Wheel wheel)
    {
        newWheel = wheel;
        propertiesToDelete = new List<WheelProperty>();
    }

    private async Task DeleteWheel(Wheel wheel)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        if (result != null)
        {
            await WheelService.DeleteWheel(wheel);
            Wheels = await WheelService.GetWheels();
        }
    }
}
