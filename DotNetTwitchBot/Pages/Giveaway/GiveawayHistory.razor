@page "/giveawayhistory"
@using DotNetTwitchBot.Bot.Models.Giveaway
@attribute [Authorize(Roles = "Streamer, Editor")]

<PageTitle>SPTV Twitch Bot - Giveaway History</PageTitle>

<style>
    .mud-contrast-text {
        color: var(--mud-palette-white);
    }
</style>

<MudContainer Class="pa-6" MaxWidth="MaxWidth.False">
    @if (pastWinners == null)
    {
        <MudAlert Severity="Severity.Info">Loading...</MudAlert>
    }
    else
    {
        <MudPaper>
            <MudText Typo="Typo.h3">Past Winners</MudText>
            <MudTable Items="@pastWinners" CanCancelEdit="true" RowEditCommit="ItemHasBeenCommitted" SortLabel="Sort By">
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<GiveawayWinner, object>(x => x.Username)">Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GiveawayWinner, object>(x => x.Prize)">Prize</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GiveawayWinner, object>(x => x.WinningDate)">Date</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GiveawayWinner, object>(x => x.PrizeTier)">Tier</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GiveawayWinner, object>(x => x.Email)">Email</MudTableSortLabel><MudIconButton Icon=@inputIcon OnClick="HiddenClick" /></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GiveawayWinner, object>(x => x.ClaimedBy)">Claimed By</MudTableSortLabel><MudIconButton Icon=@inputIcon OnClick="HiddenClick" /></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Username</MudTd>
                    <MudTd DataLabel="Prize">@context.Prize</MudTd>
                    <MudTd DataLabel="Date">@context.WinningDate.ToShortDateString()</MudTd>
                    <MudTd DataLabel="Tier">@context.PrizeTier</MudTd>
                    @if (isVisible)
                    {
                        <MudTd DataLabel="Email">@context.Email</MudTd>
                        <MudTd DataLabel="ClaimedBy">@context.ClaimedBy</MudTd>
                    }
                    else
                    {
                        <MudTd DataLabel="Email">@hidden.Value</MudTd>
                        <MudTd DataLabel="ClaimedBy">@hidden.Value</MudTd>
                    }
                    
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Name">@context.Username</MudTd>
                    <MudTd DataLabel="Prize"><MudTextField @bind-Value="context.Prize" /></MudTd>
                    <MudTd DataLabel="Date">@context.WinningDate.ToShortDateString()</MudTd>
                    <MudTd DataLabel="Tier"><MudTextField @bind-Value="context.PrizeTier" /></MudTd>
                    <MudTd DataLabel="Email"><MudTextField InputType="@inputType" @bind-Value="context.Email" /></MudTd>
                    <MudTd DataLabel="ClaimedBy"><MudTextField InputType="@inputType" @bind-Value="context.ClaimedBy" /></MudTd>

                </RowEditingTemplate>
            </MudTable>
        </MudPaper>
    }
</MudContainer>

@code {
    private List<Bot.Models.Giveaway.GiveawayWinner>? pastWinners;
    [Inject]
    private DotNetTwitchBot.Bot.Commands.Features.GiveawayFeature giveawayFeature { get; set; } = default!;

    bool isVisible = false;
    InputType inputType = InputType.Password;
    string inputIcon = Icons.Material.Filled.VisibilityOff;
    MarkupString hidden = new MarkupString("<Hidden>");

    private void HiddenClick()
    {
        isVisible = !isVisible;
        inputIcon = isVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        inputType = isVisible ? InputType.Text : InputType.Password;
    }
    protected override async Task OnInitializedAsync()
    {
        pastWinners = await giveawayFeature.PastWinners();

    }

    private async void ItemHasBeenCommitted(object element)
    {
        var winner = (Bot.Models.Giveaway.GiveawayWinner)element;
        await giveawayFeature.UpdateWinner(winner);
    }
}
