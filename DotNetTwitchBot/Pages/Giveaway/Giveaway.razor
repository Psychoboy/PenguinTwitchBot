@page "/giveaway"
@attribute [Authorize(Roles = "Streamer")]
@using Microsoft.AspNetCore.SignalR.Client
@using DotNetTwitchBot.Bot.Models.Giveaway
@inject DotNetTwitchBot.Bot.Commands.Features.GiveawayFeature GiveawayFeature;
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ILogger<Giveaway> logger
@implements IAsyncDisposable

<PageTitle>SPTV Twitch Bot - Giveaway</PageTitle>

<style>
    .mud-contrast-text {
        color: var(--mud-palette-white);
    }
</style>

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem sm="6">
            <MudPaper Class="pa-4" Elevation="0">
                <center>
                    <MudText Typo="Typo.h5" class="mud-contrast-text">Giveaway</MudText>
                    <MudDivider class="mb-2" />
                    <MudText Typo="Typo.h5">@prize</MudText>
                    <MudImage Fluid="true" Class="rounded mt-4 px-2" Src="@imageUrl" />
                </center>
            </MudPaper>
        </MudItem>
        <MudItem sm="6">
            <MudPaper Class="pa-4" Elevation="0">
                <MudText Typo="Typo.h5" class="mud-contrast-text">Winners</MudText>
                <MudDivider class="mb-2" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Close">Close</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Draw">Draw</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Reset">Reset</MudButton>
                @foreach (var winner in winners)
                {
                    <MudDivider class="mb-2" />

                    <MudText Typo="Typo.h5">Winner: @winner.Username</MudText>
                    <MudText Typo="Typo.h6">Prize: @winner.Prize</MudText>
                    <MudText Typo="Typo.h6">Tier: @winner.PrizeTier</MudText>
                    <MudText Typo="Typo.h6">Is Following: @winner.IsFollowing</MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>

</MudContainer>

@if (pastWinners == null)
{
    <MudAlert Severity="Severity.Info">Loading...</MudAlert>
}
else
{
    <MudPaper Class="pa-16 ma-2" Outlined="true">
        <MudText Typo="Typo.h3">Past Winners</MudText>
        <MudTable Items="@pastWinners">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Prize</MudTh>
                <MudTh>Date</MudTh>
                <MudTh>Tier</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Username</MudTd>
                <MudTd DataLabel="Prize">@context.Prize</MudTd>
                <MudTd DataLabel="Date">@context.WinningDate.ToShortDateString()</MudTd>
                <MudTd DataLabel="Tier">@context.PrizeTier</MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
}
@code {
    private List<GiveawayWinner> winners = new List<GiveawayWinner>();
    private List<GiveawayWinner>? pastWinners;
    private string prize = "";
    private string? imageUrl;
    private HubConnection? hubConnection;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject]
    private Bot.Commands.Features.ITicketsFeature TicketsFeature { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        pastWinners = await GiveawayFeature.PastWinners();
        prize = await GiveawayFeature.GetPrize();
        imageUrl = await GiveawayFeature.GetImageUrl();

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;
        hubConnection = new HubConnectionBuilder().WithAutomaticReconnect()
        .WithUrl(Navigation.ToAbsoluteUri("/mainhub")).Build();
        hubConnection.On<List<GiveawayWinner>>("Winners", (Winners) =>
        {
            winners = Winners;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("Prize", (Prize) =>
        {
            prize = Prize;
            InvokeAsync(StateHasChanged);
        });
        try
        {
            await hubConnection.StartAsync();
        }
        catch (TaskCanceledException)
        {
            Snackbar.Add("Lost connection to bot. Data may be inaccurate until refresh.", Severity.Warning);
            logger.LogWarning("User lost connection to bot.");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Lost connection to bot. Data may be inaccurate until refresh.", Severity.Warning);
            logger.LogWarning(ex, "Failed to connect to hub");
        }
    }

    private async Task Draw()
    {
        await GiveawayFeature.Draw();
        pastWinners = await GiveawayFeature.PastWinners();
        StateHasChanged();
    }

    private async Task Close()
    {
        await GiveawayFeature.Close();
    }

    private async Task Reset()
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Are you should you want to reset the giveaway?",
        yesText: "Delete!", cancelText: "Cancel");
        if (result != null)
        {
            await GiveawayFeature.Reset();
            await TicketsFeature.ResetAllPoints();
        }
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}