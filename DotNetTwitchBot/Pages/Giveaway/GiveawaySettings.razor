@page "/giveawaysettings"
@attribute [Authorize(Roles = "Streamer, Editor")]
@using Microsoft.AspNetCore.SignalR.Client
@using DotNetTwitchBot.Bot.Models.Giveaway
@inject DotNetTwitchBot.Bot.Commands.Features.GiveawayFeature GiveawayFeature;
@inject DotNetTwitchBot.Bot.Core.Database.IDatabaseTools DatabaseTools;
@inject DotNetTwitchBot.Bot.Core.Points.IPointsSystem PointSystem;
@inject NavigationManager Navigation

<PageTitle>SPTV Twitch Bot - Giveaway Settings</PageTitle>

<MudCard>
    <MudCardContent>
        <MudTextField Label="Prize" Required="true" RequiredError="Prize is required" @bind-Value="@Prize" />
        <MudTextField Label="Image Url" Required="false" @bind-Value="@Image" />
        <MudTextField Label="Prize Tier" Required="false" @bind-Value="@PrizeTier" />
        <MudTextField Label="Additional Details" Required="false" @bind-Value="@PrizeAdditionalDetails" Lines="3" />
        @if (!string.IsNullOrEmpty(PrizeAdditionalDetails))
        {
            <MudDivider />
            <MudText Typo="Typo.h6" Class="mt-4">Markdown Preview</MudText>
            <MudMarkdown Value="@PrizeAdditionalDetails" />
        }
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
            OnClick="OnPrizeSubmit">
            Submit
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Reset">Reset</MudButton>
    </MudCardContent>
</MudCard>



@code {
    private string? Prize { get; set; }
    private string? Image { get; set; }
    private string? PrizeTier { get; set; }
    public string? PrizeAdditionalDetails { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Prize = await GiveawayFeature.GetPrize();
        Image = await GiveawayFeature.GetImageUrl();
        PrizeTier = await GiveawayFeature.GetPrizeTier();
        PrizeAdditionalDetails = await GiveawayFeature.GetPrizeAdditionalDetails();
    }

    public async void OnPrizeSubmit()
    {
        if (Prize == null) return;
        await GiveawayFeature.SetPrize(Prize);
        await GiveawayFeature.SetImageUrl(Image);
        await GiveawayFeature.SetPrizeTier(PrizeTier);
        await GiveawayFeature.SetPrizeAdditionalDetails(PrizeAdditionalDetails);
    }

    public async void Reset()
    {
        await DatabaseTools.Backup();
        await GiveawayFeature.Reset();
        // await TicketsFeature.ResetAllPoints();
        await PointSystem.RemoveAllPointsForGame("GiveawayFeature");
    }
}