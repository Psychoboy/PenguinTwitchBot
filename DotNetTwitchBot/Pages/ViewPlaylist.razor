@page "/viewplaylist/{id:int}"
@attribute [Authorize(Roles = "Streamer, Editor")]
@inject DotNetTwitchBot.Bot.Commands.Music.YtPlayer YtPlayer

<PageTitle>SPTV Twitch Bot - View Playlist</PageTitle>
@if (musicPlaylist != null)
{
    <MudItem xs="12">
        <MudPaper Elevation="2" Class="pa-4">
            <MudText Typo="Typo.h6">Playlist: @musicPlaylist.Name - Total Songs
                @musicPlaylist.Songs.Count</MudText>
            <MudTable Items="@musicPlaylist.Songs">
                <HeaderContent>
                    <MudTh>Title</MudTh>
                    <MudTh>Length</MudTh>
                    <MudTh>Song Id</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Title</MudTd>
                    <MudTd DataLabel="Duration">@context.Duration</MudTd>
                    <MudTd DataLabel="Song Id">
                        <MudLink href='@string.Format("https://youtu.be/{0}", @context.SongId)' Target="_blank">
                            @context.SongId
                        </MudLink>
                    </MudTd>
                    <MudTd DataLabel="Remove">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => RemoveSong(context)">
                            Remove</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudItem>
}
@code {
    [Parameter]
    public int id { get; set; }
    private MusicPlaylist? musicPlaylist { get; set; }

    protected override async void OnParametersSet()
    {
        musicPlaylist = await YtPlayer.GetPlayList(id);
        StateHasChanged();
    }

    private async Task RemoveSong(Song song)
    {
        await YtPlayer.RemoveSong(song);
    }
}