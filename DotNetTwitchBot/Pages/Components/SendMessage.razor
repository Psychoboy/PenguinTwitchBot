@attribute [Authorize(Roles = "Streamer")]
<MudContainer Class="pa-4">
    <EditForm Model="MessageModel" OnSubmit="SendChatMessage">
        <MudSelect Label="Send As" @bind-Value="MessageModel.SendAs">
            <MudSelectItem Value="SendAsType.Streamer">Streamer</MudSelectItem>
            <MudSelectItem Value="SendAsType.Bot">Bot</MudSelectItem>
        </MudSelect>
        <MudTextField @ref="textField" @bind-Value="MessageModel.Message" Label="Message" />
        <MudButton OnClick="SendChatMessage" Variant="Variant.Filled" Color="Color.Primary">Send</MudButton>
    </EditForm>
</MudContainer>


@code {

    public class SendMessageModel
    {
        public string Message { get; set; } = string.Empty;
        public SendAsType SendAs { get; set; } = SendAsType.Streamer;
    }
    private SendMessageModel MessageModel { get; set; } = new SendMessageModel();

    [Inject]
    private DotNetTwitchBot.Bot.TwitchServices.ITwitchService twitchService { get; set; } = default!;
    [Inject]
    private DotNetTwitchBot.Bot.TwitchServices.ITwitchChatBot twitchChatBot { get; set; } = default!;

    MudTextField<string>? textField;
    public enum SendAsType
    {
        Streamer,
        Bot
    }

    private async Task SendChatMessage()
    {
        if (string.IsNullOrWhiteSpace(MessageModel.Message))
        {
            return;
        }



        if (MessageModel.SendAs == SendAsType.Streamer)
        {
            await twitchService.SendMesssageAsStreamer(MessageModel.Message);
        }
        else
        {
            await twitchChatBot.SendMessage(MessageModel.Message);
        }
        MessageModel.Message = string.Empty;
        textField?.Clear();
        
        await InvokeAsync(StateHasChanged);
    }
}
