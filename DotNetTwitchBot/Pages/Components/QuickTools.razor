@attribute [Authorize(Roles = "Streamer, Editor")]
@inject DotNetTwitchBot.Bot.Commands.Moderation.Admin Admin
@inject DotNetTwitchBot.Bot.Commands.Features.IViewerFeature viewerFeature
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DotNetTwitchBot.Bot.Core.IChatHistory ChatHistory
@inject DotNetTwitchBot.Bot.StreamSchedule.ISchedule Schedule
@inject DotNetTwitchBot.Bot.TwitchServices.ITwitchWebsocketHostedService TwitchWebsocketHostedService

<CascadingAuthenticationState> 
    <AuthorizeView Roles="Streamer">
        <Authorized>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PauseAlerts">Pause Alerts</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ResumeAlerts">Resume Alerts</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Reconnect">Reconnect</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ForceOnline">Force Online</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ForceOffline">Force Offline</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="UpdateSchedule">Update Events</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="UpdatePostedSchedule">Update Schedule</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateEditors">Update Editors</MudButton>
        </Authorized>
        <NotAuthorized>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
@code {
    private async Task UpdateEditors()
    {
        await viewerFeature.UpdateEditors();
    }
    private async Task UpdatePostedSchedule()
    {
        await Schedule.PostSchedule();
    }
    private async Task PauseAlerts()
    {
        await Admin.PauseAlerts();
    }

    private async Task ResumeAlerts()
    {
        await Admin.ResumeAlerts();
    }

    private async Task Reconnect()
    {
        await TwitchWebsocketHostedService.ForceReconnect();
    }

    private async Task ForceOnline()
    {
        await TwitchWebsocketHostedService.StreamOnline();
    }

    private async Task ForceOffline()
    {
        await TwitchWebsocketHostedService.StreamOffline();
    }

    private async Task UpdateSchedule()
    {
        await Schedule.UpdateEvents();
    }
}
