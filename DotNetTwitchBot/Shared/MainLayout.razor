@using DotNetTwitchBot.Circuit;
@using DotNetTwitchBot.Models;
@using Microsoft.AspNetCore.Components.Server.Circuits;
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ICircuitUserService UserService
@inject CircuitHandler BlazorCircuitHandler
@implements IDisposable

<PageTitle>SPTV Twitch Bot</PageTitle>
<MudThemeProvider IsDarkMode=true />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
            OnClick="@((e) => DrawerToggle())" />
        Super Waffle Bot
        <MudSpacer />
        <AuthorizeView>
            <Authorized Context="Auth">
                <MudImage Width="48" Src="@ProfileImage" />
                <MudMenu Label="@Username" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.TopCenter">
                    <MudMenuItem OnClick="Signout">Sign out</MudMenuItem>
                </MudMenu>
            </Authorized>
            <NotAuthorized>
                <MudLink Href="/signin" Match="NavLinkMatch.Prefix">Sign In</MudLink>
            </NotAuthorized>
         </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" Elevation="1">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>
@code {
    bool _drawerOpen = true;
    private string Username = "";
    private string ProfileImage = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated && user.Identity.Name != null)
        {
            Username = user.Identity.Name;
            if (user.HasClaim(x => x.Type.Equals("DisplayName")))
            {
                Username = user.Claims.Where(x => x.Type.Equals("DisplayName")).First().Value;
            }

            if (user.HasClaim(x => x.Type.Equals("ProfilePicture")))
            {
                ProfileImage = user.Claims.Where(x => x.Type.Equals("ProfilePicture")).First().Value;
            }
        }
        var handler = (CircuitHandlerService)BlazorCircuitHandler;
        UserService.Connect(handler.CircuitId, Username);
        Navigation.LocationChanged += HandleLocationChanged;
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var handler = (CircuitHandlerService)BlazorCircuitHandler;
        UserService.UpdateUserLastSeen(handler.CircuitId, Navigation.Uri);
    }

    private void Signout()
    {
        Navigation.NavigateTo("/signout", true);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }
}
